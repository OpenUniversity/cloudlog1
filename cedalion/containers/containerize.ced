'/bootstrap':signature(containerize(TTerm,ContTTerm,Cont)::'/bootstrap':pred,[TTerm::'/bootstrap':typedTerm,ContTTerm::'/bootstrap':typedTerm,Cont::'/bootstrap':string]).
'/util':behavior(containerize(TTerm,ContTTerm,Cont)::'/bootstrap':pred,!'should copy variables into the container', (containerize(X::T,Y::T,!foo),'/util':assertEqual(X,Y,T))).
'/util':behavior(containerize(TTerm,ContTTerm,Cont)::'/bootstrap':pred,!'should prefix compound terms', (containerize('/bootstrap':listMember(X,T,L)::'/bootstrap':pred,ContTTerm,!foo),builtin:parseTerm(ContTTerm,Name,_),builtin:strcat(!'foo@',_,Name))).
'/util':behavior(containerize(TTerm,ContTTerm,Cont)::'/bootstrap':pred,!'should prefix nested compound terms', (containerize('/bootstrap':listMember(X,'/bootstrap':string,L)::'/bootstrap':pred,ContTTerm,!foo),builtin:parseTerm(ContTTerm,_,[_,StrType,_]),builtin:parseTerm(StrType,Name,[]),builtin:strcat(!'foo@',_,Name))).
annotation:shrink((containerize(TTerm,ContTTerm,Cont):-builtin:if(builtin:compound(TTerm), ('/bootstrap':safeParseTerm(TTerm,Name,Args),containerizeName(Name,NamePrime,Cont),containerizeList(Args,ContArgs,Cont),builtin:parseTerm(ContTTerm,NamePrime,ContArgs)),TTerm=ContTTerm))).
'/bootstrap':signature(containerizeList(TTerms,ContTTerms,Cont)::'/bootstrap':pred,[TTerms::'/bootstrap':list('/bootstrap':typedTerm),ContTTerms::'/bootstrap':list('/bootstrap':typedTerm),Cont::'/bootstrap':string]).
containerizeList([],[],_):-builtin:true.
annotation:shrink((containerizeList([TTerm|TTerms],[ContTTerm|ContTTerms],Cont):-containerize(TTerm,ContTTerm,Cont),containerizeList(TTerms,ContTTerms,Cont))).

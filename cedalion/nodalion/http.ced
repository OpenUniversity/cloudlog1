'/bootstrap':defAtom(method::'/bootstrap':type).
'/bootstrap':defAtom(get::method).
'/bootstrap':projection(get::method,'/bootstrap':label(!'GET')).
'/bootstrap':defAtom(service::'/bootstrap':type).
'/bootstrap':defAtom(test::service).
'/bootstrap':defAtom(contentSource::'/bootstrap':type).
'/bootstrap':defAtom(contentSink::'/bootstrap':type).
'/bootstrap':defAtom(url::'/bootstrap':type).
'/bootstrap':sigProj(serveHttp(Service,Method,URL,Req,Source,Sink)::'/impred':impred,[Service::service,Method::method,URL::url,Req::'/bootstrap':number,Source::contentSource,Sink::contentSink],'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!'Serve'),'/bootstrap':vis(Service::service),'/bootstrap':label(! (:)),'/bootstrap':vis(Method::method),'/bootstrap':vis(URL::url),'/bootstrap':label(! (as)),'/bootstrap':vis(Req::'/bootstrap':number)]),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!'Source:'),'/bootstrap':vis(Source::contentSource)]),'/bootstrap':horiz(['/bootstrap':label(!'Sink:'),'/bootstrap':vis(Sink::contentSink)])])])])).
'/bootstrap':defAtom(noSource::contentSource).
'/bootstrap':signature(stringContent(Type,Content)::contentSink,[Type::'/bootstrap':string,Content::'/bootstrap':string]).
'/bootstrap':projection(stringContent(Type,Content)::contentSink,'/bootstrap':horiz(['/bootstrap':label(!'text/'),'/bootstrap':vis(Type::'/bootstrap':string),'/bootstrap':label(! (:)),'/bootstrap':vis(Content::'/bootstrap':string)])).
'/bootstrap':unitTest('/impred':simulate(serveHttp(test,get,url(!http,Domain,[!hello],[queryPair(!foo,!bar),queryPair(!poo,!car)]),Req,noSource,stringContent(!plain,!'Hello, World')),[],'/impred':true)).

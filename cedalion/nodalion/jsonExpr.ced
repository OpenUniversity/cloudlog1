'/bootstrap':signature(jsonMember(Obj,Field)::'/Functional':expr(json),[Obj::'/Functional':expr(json),Field::'/bootstrap':string]).
'/bootstrap':projection(jsonMember(Obj,Field)::'/Functional':expr(json),'/bootstrap':horiz(['/bootstrap':vis(Obj::'/Functional':expr(json)),'/bootstrap':label(!.),'/bootstrap':vis(Field::'/bootstrap':string)])).
'/util':behavior(jsonMember(Obj,Field)::'/Functional':expr(json),!'should evaluate to Object\'s field named Field', ('/Functional':eval(jsonMember('/Functional':const(jsonObj([field(!a,jsonNum(1)),field(!b,jsonNum(2))])),!b),json,Two),'/util':assertEqual(Two,jsonNum(2),json))).
'/bootstrap':signature(fieldDoesNotExist(C)::'/bootstrap':exception,[C::'/bootstrap':string]).
'/util':behavior(jsonMember(Obj,Field)::'/Functional':expr(json),!'should throw an exception if Field does not exist in Object',builtin:catch(('/Functional':eval(jsonMember('/Functional':const(jsonObj([field(!a,jsonNum(1)),field(!b,jsonNum(2))])),!c),json,_),builtin:fail),fieldDoesNotExist(C),'/util':assertEqual(C,!c,'/bootstrap':string))).
'/util':behavior(jsonMember(Obj,Field)::'/Functional':expr(json),!'should throw an exception if Object is not genuinely an object',builtin:catch(('/Functional':eval(jsonMember('/Functional':const(jsonStr(!foo)),!c),json,_),builtin:fail),jsonTypeMismatch(Expected,Actual), ('/util':assertStracturallyEqual(Expected,jsonObj(_),json),'/util':assertEqual(Actual,jsonStr(!foo),json)))).
'/Functional':eval(jsonMember(Obj,FieldName),json,FieldVal):-'/Functional':eval(Obj,json,ObjVal),builtin:if(ObjVal::json=jsonObj(Fields)::json,builtin:if('/bootstrap':listMember(field(FieldName,FieldVal),jsonField,Fields),builtin:true,builtin:throw(fieldDoesNotExist(FieldName))),builtin:throw(jsonTypeMismatch(jsonObj(Fields),ObjVal))).
'/bootstrap':signature(asString(Json)::'/Functional':expr('/bootstrap':string),[Json::'/Functional':expr(json)]).
'/bootstrap':projection(asString(Json)::'/Functional':expr('/bootstrap':string),'/bootstrap':horiz(['/bootstrap':vis(Json::'/Functional':expr(json)),'/bootstrap':label(!'as string')])).
'/util':behavior(asString(Json)::'/Functional':expr('/bootstrap':string),!'should cast a string json value to a string', ('/Functional':eval(asString('/Functional':const(jsonStr(!foo))),'/bootstrap':string,Str),'/util':assertEqual(Str,!foo,'/bootstrap':string))).
'/bootstrap':signature(jsonTypeMismatch(Expected,Actual)::'/bootstrap':exception,[Expected::json,Actual::json]).
'/util':behavior(asString(Json)::'/Functional':expr('/bootstrap':string),!'should throw an exception if Json does not evaluate to a string',builtin:catch(('/Functional':eval(asString('/Functional':const(jsonObj([field(!foo,jsonNum(1))]))),'/bootstrap':string,Str),builtin:fail),jsonTypeMismatch(Expected,Actual), ('/util':assertStracturallyEqual(Expected,jsonStr(_),json),'/util':assertEqual(Actual,jsonObj([field(!foo,jsonNum(1))]),json)))).
annotation:shrink(('/Functional':eval(asString(Json),'/bootstrap':string,Str):-'/Functional':eval(Json,json,JsonVal),builtin:if(jsonStr(Str)::json=JsonVal::json,builtin:true,builtin:throw(jsonTypeMismatch(jsonStr(Str),JsonVal))))).

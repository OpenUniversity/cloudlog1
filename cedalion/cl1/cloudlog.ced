'/nodalion':serve('cl1','/nodalion':put,!'/cloudlog/:path',['/nodalion':textBody,'/nodalion':with('/nodalion':jsonObj(['/nodalion':field(!params,Params),'/nodalion':field(!body,'/nodalion':jsonStr(Code)),'/nodalion':field(!hostname,'/nodalion':jsonStr(Domain))]),'/impred':conj('/impred':pred('/Functional':eval('/nodalion':asString('/nodalion':jsonMember('/Functional':const(Params),!path)),'/bootstrap':string,Path)),'/impred':conj('/impred':pred(builtin:if('/parsing':lexParseString('/cloudlog':file(_,['/cloudlog':package(Domain)]),Code,'/cloudlog':cloudlog),builtin:true,builtin:throw('/nodalion':serviceException(['/nodalion':setStatus(400),'/nodalion':outputJson('/nodalion':jsonObj(['/nodalion':field(!status,'/nodalion':jsonStr(!'ERROR')),'/nodalion':field(!error,'/nodalion':jsonStr(!'Syntax Error'))]))])))),'/impred':conj('/nodalion':findall('/cloudlog':addition(cloudlogCode([Domain,Path],CodePrime),NegValue),'/cloudlog':addition,'/impred':conj('/cloudlog':logicQuery(isCloudlogCode([Domain,Path],CodePrime),Value),'/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(0),'/Functional':minus,'/Functional':const(Value)),'/bootstrap':number,NegValue))),Removals),'/cloudlog':trans(['/cloudlog':addition(cloudlogCode([Domain,Path],Code),1)|Removals])))),['/nodalion':outputJson('/nodalion':jsonObj(['/nodalion':field(!status,'/nodalion':jsonStr(!'OK'))]))])]).
'/bootstrap':signature(cloudlogCode(PathList,Code)::'/cloudlog':axiom,[PathList::'/bootstrap':list('/bootstrap':string),Code::'/bootstrap':string]).
'/bootstrap':signature(isCloudlogCode(PathList,Code)::'/cloudlog':pred,[PathList::'/bootstrap':list('/bootstrap':string),Code::'/bootstrap':string]).
'/cloudlog':genericRule('/cloudlog':rule(cloudlogCode(PathList,Code),builtin:true,'/cloudlog':clause(isCloudlogCode(PathList,Code),'/cloudlog':true))).
'/nodalion':serve('cl1','/nodalion':get,!'/cloudlog/:path',['/nodalion':with('/nodalion':jsonObj(['/nodalion':field(!params,Params),'/nodalion':field(!hostname,'/nodalion':jsonStr(Domain))]),'/impred':conj('/impred':pred('/Functional':eval('/nodalion':asString('/nodalion':jsonMember('/Functional':const(Params),!path)),'/bootstrap':string,Path)),'/cloudlog':logicQuery(isCloudlogCode([Domain,Path],Code),_)),['/nodalion':outputText(!'text/cloudlog',Code)])]).
'/util':behavior(cloudlogCode(Path,Code)::'/cloudlog':axiom,!'should map into its individual axioms being enqueued','/impred':simulate('/cloudlog':trans(['/cloudlog':addition(cloudlogCode([!myDomain,!'foo.clg'],!'foo("a", 1). bar(X, 2)->foo(X, 1).'),1)]),['/impred':task('/nodalion':trans(!'/cl1#cloudlogCode',[!myDomain,!'foo.clg'],_),['/nodalion':value(!master,'/cloudlog':version,[])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':list('/bootstrap':string),'/cloudlog':axiom,_))),'/impred':task('/nodalion':enqueue(!wq,'/cloudlog':trans(['/cloudlog':addition('/cloudlog':clause(isCloudlogCode([!myDomain,!'foo.clg'],!'foo("a", 1). bar(X, 2)->foo(X, 1).'),'/cloudlog':true),1)]),'/impred':impred),_,'/nodalion':voidType),'/impred':task('/nodalion':enqueue(!wq,'/cloudlog':trans(['/cloudlog':addition(myDomain:foo(!a,1),1)]),'/impred':impred),_,'/nodalion':voidType),'/impred':task('/nodalion':enqueue(!wq,'/cloudlog':masterTrans(['/cloudlog':addition('/cloudlog':rule(myDomain:bar(X,2),builtin:true,myDomain:foo(X,1)),1)]),'/impred':impred),_,'/nodalion':voidType)],_)).
'/cloudlog':genericRule('/cloudlog':rule(cloudlogCode([Domain,_],Code), ('/parsing':lexParseString('/cloudlog':file(Axioms,['/cloudlog':package(Domain)]),Code,'/cloudlog':cloudlog),'/bootstrap':listMember(Axiom,'/cloudlog':axiom,Axioms)),Axiom)).

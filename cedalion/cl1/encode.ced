'/nodalion':serve('cl1','/nodalion':post,!'/encode/:target',['/nodalion':textBody,'/nodalion':with('/nodalion':jsonObj(['/nodalion':field(!body,Text),'/nodalion':field(!params,Params),'/nodalion':field(!protocol,Proto),'/nodalion':field(!headers,Headers)]),'/impred':conj('/impred':pred('/Functional':eval('/nodalion':asString('/Functional':const(Text)),'/bootstrap':string,Str)),'/impred':conj('/impred':pred('/Functional':eval('/nodalion':asString('/nodalion':jsonMember('/Functional':const(Params),!target)),'/bootstrap':string,TargetPrime)),'/impred':if('/impred':pred(parseCloudlog(TargetPrime,Str,['/cloudlog':package(!somePackage)],_,_)),'/impred':conj('/nodalion':hashForText(Str,Hash),'/impred':pred(('/Functional':eval('/Functional':applyBinOp('/nodalion':asString('/Functional':const(Proto)),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(!'://'),'/Functional':concat,'/Functional':applyBinOp('/nodalion':asString('/nodalion':jsonMember('/Functional':const(Headers),!host)),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (/)),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(TargetPrime),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (/)),'/Functional':concat,'/Functional':const(Hash))))))),'/bootstrap':string,URL),Actions::'/bootstrap':list('/nodalion':handler)=['/nodalion':outputJson('/nodalion':jsonObj(['/nodalion':field(!url,'/nodalion':jsonStr(URL))]))]::'/bootstrap':list('/nodalion':handler)))),'/impred':pred(('/Functional':eval('/Functional':applyBinOp('/Functional':const(!'Invalid term: '),'/Functional':concat,'/Functional':const(Str)),'/bootstrap':string,ErrMsg),Actions::'/bootstrap':list('/nodalion':handler)=annotation:changeMode(['/nodalion':setStatus(400),'/nodalion':outputText(!'text/plain',ErrMsg)],'/bootstrap':vert)::'/bootstrap':list('/nodalion':handler)))))),Actions)]).
'/bootstrap':signature(parseCloudlog(Target,Str,CtxIn,TTerm,Ctx)::'/bootstrap':pred,[Target::'/bootstrap':string,Str::'/bootstrap':string,CtxIn::'/bootstrap':list('/cloudlog':ctxElem),TTerm::'/bootstrap':typedTerm,Ctx::'/bootstrap':list('/cloudlog':ctxElem)]).
parseCloudlog(!q,Str,CtxIn,Goal::'/cloudlog':pred,Ctx):-'/parsing':lexParseString('/cloudlog':goal(Goal,CtxIn,Ctx),Str,'/cloudlog':cloudlog).

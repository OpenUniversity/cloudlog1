'/nodalion':serve('cl1','/nodalion':post,!'/encode/:target',['/nodalion':textBody,'/nodalion':with('/nodalion':jsonObj(['/nodalion':field(!body,Text),'/nodalion':field(!params,Params),'/nodalion':field(!protocol,Proto),'/nodalion':field(!headers,Headers)]),'/impred':conj('/impred':pred('/Functional':eval('/nodalion':asString('/Functional':const(Text)),'/bootstrap':string,Str)),'/impred':if('/impred':pred('/parsing':lexParseString('/cloudlog':term(Term::Type,['/cloudlog':package(!foo)],_),Str,'/cloudlog':cloudlog)),'/impred':pred(('/Functional':eval('/Functional':applyBinOp('/nodalion':asString('/Functional':const(Proto)),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(!'://'),'/Functional':concat,'/Functional':applyBinOp('/nodalion':asString('/nodalion':jsonMember('/Functional':const(Headers),!host)),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (/)),'/Functional':concat,'/Functional':applyBinOp('/nodalion':asString('/nodalion':jsonMember('/Functional':const(Params),!target)),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (/)),'/Functional':concat,'/Functional':const(!foo))))))),'/bootstrap':string,URL),Actions::'/bootstrap':list('/nodalion':handler)=['/nodalion':outputJson('/nodalion':jsonObj(['/nodalion':field(!url,'/nodalion':jsonStr(URL))]))]::'/bootstrap':list('/nodalion':handler))),'/impred':pred(('/Functional':eval('/Functional':applyBinOp('/Functional':const(!'Invalid term: '),'/Functional':concat,'/Functional':const(Str)),'/bootstrap':string,ErrMsg),Actions::'/bootstrap':list('/nodalion':handler)=annotation:changeMode(['/nodalion':setStatus(400),'/nodalion':outputText(!'text/plain',ErrMsg)],'/bootstrap':vert)::'/bootstrap':list('/nodalion':handler))))),Actions)]).

'/bootstrap':signature('/counterDB':seen(Thread,Transaction)::impred,[Thread::'/bootstrap':string,Transaction::'/bootstrap':number]).
'/bootstrap':projection('/counterDB':seen(Thread,Transaction)::impred,'/bootstrap':horiz(['/bootstrap':vis(Thread::'/bootstrap':string),'/bootstrap':symbol(8805),'/bootstrap':vis(Transaction::'/bootstrap':number)])).
'/bootstrap':alias('/counterDB':seen(Thread,Transaction)::impred,! (>=)).
clause('/counterDB':seen(Thread,Transaction),conj('/counterDB':currTransSeen(Thread,Trans),pred('/Functional':ge('/Functional':const(Trans),'/Functional':const(Transaction),'/bootstrap':number)))).
'/util':behavior('/counterDB':seen(Thread,Transaction)::impred,!'should succeed if the current transaction has a value for Thread, and it is greater or equal Transaction',simulate(with(localGet(!currentTransaction),localStr(!myTrans),localStoreVal,with(localGet(!'myTrans:someThread'),'/counterDB':localNum(6),localStoreVal,'/counterDB':seen(!someThread,4))),[],true)).
'/util':behavior('/counterDB':seen(Thread,Transaction)::impred,!'should fail if the current transaction has a value for Thread, and it is smaller than Transaction',simulate(not(with(localGet(!currentTransaction),localStr(!myTrans),localStoreVal,with(localGet(!'myTrans:someThread'),'/counterDB':localNum(3),localStoreVal,'/counterDB':seen(!someThread,4)))),[],true)).
'/bootstrap':signature('/counterDB':currTransSeen(Thread,Transaction)::impred,[Thread::'/bootstrap':string,Transaction::'/bootstrap':number]).
'/util':behavior('/counterDB':currTransSeen(Thread,Transaction)::impred,!'should succeed if the current transaction saw a transaction value for Thread', (simulate('/counterDB':currTransSeen(!someThr,Trans),[task(localGet(!currentTransaction),localStr(!myTrans),localStoreVal),task(localGet(!'myTrans:someThr'),'/counterDB':localNum(7),localStoreVal)],true),builtin:equals(Trans::'/bootstrap':number,7::'/bootstrap':number))).
annotation:shrink(clause('/counterDB':currTransSeen(Thread,Transaction),conj(eval(call(localGet(!currentTransaction)),localStoreVal,localStr(MyTrans)),conj(pred('/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(MyTrans),'/Functional':concat,'/Functional':const(! (:))),'/Functional':concat,'/Functional':const(Thread)),'/bootstrap':string,Key)),task(localGet(Key),'/counterDB':localNum(Transaction),localStoreVal))))).

'/bootstrap':signature(simulate(Impred,List,Next)::'/bootstrap':pred,[Impred::impred,List::'/bootstrap':list(impred),Next::impred]).
'/bootstrap':projection(simulate(Impred,List,Next)::'/bootstrap':pred,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!simulate),'/bootstrap':vis(Impred::impred)]),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!'having:'),cpi:vis(List::'/bootstrap':list(impred),'/bootstrap':vert)]),'/bootstrap':horiz(['/bootstrap':label(!'next:'),'/bootstrap':vis(Next::impred)])])])])).
'/bootstrap':unitTest(simulate(pred(builtin:plus(1,2,3)),[],true)).
'/bootstrap':unitTest(\+simulate(pred(builtin:plus(1,2,4)),[],true)).
'/bootstrap':unitTest(\+simulate(task(userInput,X,'/bootstrap':string),[],true)).
'/bootstrap':signature(simulateResp(Resp,Having,Next)::'/bootstrap':pred,[Resp::response(_),Having::'/bootstrap':list(impred),Next::impred]).
simulate(Impred,Having,Next):-solve(Impred,_,_,Resp),simulateResp(Resp,Having,Next).
simulateResp(solution(_),_,_):-builtin:true.
simulateResp(throws(Ex),_,_):-builtin:throw(Ex).
simulateResp(continuation(Task,RetVal,T,Cont,_),[],task(Task,RetVal,T)):-builtin:true.
annotation:shrink((simulateResp(continuation(Task,RetVal,T,Cont,_),[task(Task,RetVal,T)|Rest],Next):-simulate(Cont,Rest,Next))).
'/bootstrap':unitTest(simulate(conj(task(userInput,X,'/bootstrap':string),pred(builtin:strcat(X,!', world',!'hello, world'))),[],task(userInput,X,'/bootstrap':string))).
'/bootstrap':unitTest(simulate(annotation:parentheses(conj(task(userInput,!hello,'/bootstrap':string),pred(builtin:strcat(!hello,!', world',!'hello, world')))),[task(userInput,!hello,'/bootstrap':string)],true)).
'/bootstrap':unitTest(\+simulate(annotation:parentheses(conj(task(userInput,Greet,'/bootstrap':string),pred(builtin:strcat(Greet,!', world',!'goodbye, world')))),[task(userInput,!hello,'/bootstrap':string)],true)).
'/bootstrap':unitTest(simulate(conj(task(userInput,!hello,'/bootstrap':string),task(userInput,Y,'/bootstrap':string)),[task(userInput,!hello,'/bootstrap':string)],task(userInput,Y,'/bootstrap':string))).
'/bootstrap':signature(appendNext(Simulate,Path,VNs)::'/bootstrap':procedure,[Simulate::'/bootstrap':pred,Path::cpi:path,VNs::'/bootstrap':list('/bootstrap':varName)]).
cpi:procedureCommand(appendNext(simulate(Impred,Having,Next),Path,VNs),'/bootstrap':doProc(cpi:edit(Path,simulate(Impred,HavingPrime,Next)::'/bootstrap':pred,VNs))):-simulate(Impred,Having,N),'/bootstrap':append(Having,[N],HavingPrime,impred).
'/bootstrap':contextMenuEntry(simulate(Impred,Having,Next)::'/bootstrap':pred,VNs,Path,!'Append Next',appendNext(simulate(Impred,Having,Next),Path,VNs)).

'/bootstrap':signature(counterOp(KeyType)::'/bootstrap':type,[KeyType::'/bootstrap':type]).
'/bootstrap':signature(counterTrans(Table,Row,KeyType,Ops)::'/impred':impred,[Table::'/bootstrap':string,Row::'/bootstrap':typedTerm,KeyType::'/bootstrap':type,Ops::'/bootstrap':list(counterOp(KeyType))]).
'/util':behavior(counterTrans(Table,Row,KeyType,Ops)::'/impred':impred,!'should perform an empty trans() if Ops is empty','/impred':simulate(counterTrans(!tbl,!row::'/bootstrap':string,'/bootstrap':string,[]),['/impred':task('/nodalion':trans(!tbl,!row,[]),[],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,_,_)))],'/impred':true)).
'/bootstrap':signature(convertOps(Ops,KeyType,DbOps)::'/bootstrap':pred,[Ops::'/bootstrap':list(counterOp(KeyType)),KeyType::'/bootstrap':type,DbOps::'/bootstrap':list('/nodalion':databaseOp(KeyType,counterExpr))]).
convertOps([],_,[]):-builtin:true.
annotation:shrink('/bootstrap':signature(matchResults(Ops,KeyType,RowType,Result)::'/bootstrap':pred,annotation:changeMode([Ops::'/bootstrap':list(counterOp(KeyType)),KeyType::'/bootstrap':type,RowType::'/bootstrap':type,Result::'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr))],'/bootstrap':vert))).
matchResults([],_,_,[]):-builtin:true.
annotation:shrink('/bootstrap':signature(compactResults(Result,KeyType,RowType,ResultPrime)::'/impred':impred,annotation:changeMode([Result::'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr)),KeyType::'/bootstrap':type,RowType::'/bootstrap':type,ResultPrime::'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr))],'/bootstrap':vert))).
'/impred':clause(compactResults([],_,_,[]),'/impred':true).
'/impred':clause(compactResults(['/nodalion':value(Fam,Key,List)],RowType,KeyType,['/nodalion':value(Fam,Key,[Expr])]),'/impred':conj('/impred':pred(sum(List,ExprPrime)),compact(ExprPrime,Expr))).
annotation:shrink('/impred':clause(counterTrans(Table,Row::RowType,KeyType,Ops),'/impred':conj('/impred':pred(convertOps(Ops,KeyType,DbOps)),'/impred':conj('/impred':task('/nodalion':trans(Table,Row,DbOps),Result,'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr))),'/impred':conj(compactResults(Result,KeyType,RowType,ResultPrime),'/impred':pred(matchResults(Ops,KeyType,RowType,ResultPrime))))))).
'/bootstrap':sigProj(add(Family,Key,AddExpr,PrevExpr)::counterOp(KT),[Family::'/bootstrap':string,Key::KT,AddExpr::counterExpr,PrevExpr::counterExpr],'/bootstrap':horiz(['/bootstrap':vis(Family::'/bootstrap':string),'/bootstrap':label(! (/)),'/bootstrap':vis(Key::KT),'/bootstrap':label(!'+='),'/bootstrap':vis(AddExpr::counterExpr),'/bootstrap':brackets('/bootstrap':vis(PrevExpr::counterExpr),40,41)])).
'/util':behavior(add(Family,Key,AddExpr,PrevExpr)::counterOp(KeyType),!'should append AddExpr to Family/Key and query its previous value','/impred':simulate(counterTrans(!tbl,!row::'/bootstrap':string,'/bootstrap':string,[add(!fam,!key,counterValue(2),X)]),['/impred':task('/nodalion':trans(!tbl,!row,['/nodalion':append(!fam,!key,counterValue(2)),'/nodalion':get(!fam,!key)]),['/nodalion':value(!fam,!key,[counterValue(1)])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,'/bootstrap':string,counterExpr)))],'/impred':true)).
annotation:shrink((convertOps(annotation:changeMode([add(Family,Key,AddExpr,PrevExpr)|Ops],'/bootstrap':vert),KeyType,annotation:changeMode(['/nodalion':append(Family,Key,AddExpr),'/nodalion':get(Family,Key)|DbOps],'/bootstrap':vert)):-convertOps(Ops,KeyType,DbOps))).
'/util':behavior(add(Family,Key,AddExpr,PrevExpr)::counterOp(KeyType),!'should unify PrevExpr with the previous value', ('/impred':simulate(counterTrans(!tbl,!row::'/bootstrap':string,'/bootstrap':string,[add(!fam,!key,counterValue(2),X)]),['/impred':task('/nodalion':trans(!tbl,!row,['/nodalion':append(!fam,!key,counterValue(2)),'/nodalion':get(!fam,!key)]),['/nodalion':value(!fam,!key,[counterValue(1)])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,'/bootstrap':string,counterExpr)))],'/impred':true),builtin:equals(X::counterExpr,counterValue(1)::counterExpr))).
annotation:shrink((matchResults([add(Family,Key,_,Expr)|Ops],KeyType,RowType,Result):-'/bootstrap':listMember('/nodalion':value(Family,Key,[Expr]),'/nodalion':databaseValue(RowType,KeyType,counterExpr),Result))).
'/util':behavior(add(Family,Key,AddExpr,PrevExpr)::counterOp(KeyType),!'should handle zero-length results', ('/impred':simulate(counterTrans(!tbl,!row::'/bootstrap':string,'/bootstrap':string,[add(!fam,!key,counterValue(2),X)]),['/impred':task('/nodalion':trans(!tbl,!row,['/nodalion':append(!fam,!key,counterValue(2)),'/nodalion':get(!fam,!key)]),['/nodalion':value(!fam,!key,[])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,'/bootstrap':string,counterExpr)))],'/impred':true),builtin:equals(X::counterExpr,counterValue(0)::counterExpr))).
'/bootstrap':signature(sum(Exprs,Expr)::'/bootstrap':pred,[Exprs::'/bootstrap':list(counterExpr),Expr::counterExpr]).
sum([],counterValue(0)):-builtin:true.
sum([A|B],counterPlus(A,BPrime)):-sum(B,BPrime).

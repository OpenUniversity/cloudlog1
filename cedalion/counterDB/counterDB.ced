'/bootstrap':signature(counterOp(KeyType)::'/bootstrap':type,[KeyType::'/bootstrap':type]).
'/bootstrap':signature(counterTrans(Table,Row,KeyType,Ops)::'/impred':impred,[Table::'/bootstrap':string,Row::'/bootstrap':typedTerm,KeyType::'/bootstrap':type,Ops::'/bootstrap':list(counterOp(KeyType))]).
'/bootstrap':projection(counterTrans(Table,Row,KeyType,Ops)::'/impred':impred,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!on),'/bootstrap':vis(Table::'/bootstrap':string),'/bootstrap':label(!row),'/bootstrap':vis(Row::'/bootstrap':typedTerm),'/bootstrap':label(!'with keys of type'),'/bootstrap':vis(KeyType::'/bootstrap':type),'/bootstrap':label(!'do:')]),'/bootstrap':horiz(['/bootstrap':label(!'    '),cpi:vis(Ops::'/bootstrap':list(counterOp(KeyType)),'/bootstrap':vert)])])).
'/util':behavior(counterTrans(Table,Row,KeyType,Ops)::'/impred':impred,!'should perform an empty trans() if Ops is empty','/impred':simulate(counterTrans(!tbl,!row::'/bootstrap':string,'/bootstrap':string,[]),['/impred':task('/nodalion':trans(!tbl,!row,[]),[],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,_,_)))],'/impred':true)).
'/bootstrap':signature(convertOps(Ops,KeyType,DbOps)::'/bootstrap':pred,[Ops::'/bootstrap':list(counterOp(KeyType)),KeyType::'/bootstrap':type,DbOps::'/bootstrap':list('/nodalion':databaseOp(KeyType,counterExpr))]).
convertOps([],_,[]):-builtin:true.
annotation:shrink('/bootstrap':signature(matchResults(Ops,KeyType,RowType,Result)::'/bootstrap':pred,annotation:changeMode([Ops::'/bootstrap':list(counterOp(KeyType)),KeyType::'/bootstrap':type,RowType::'/bootstrap':type,Result::'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr))],'/bootstrap':vert))).
matchResults([],_,_,_):-builtin:true.
annotation:shrink('/bootstrap':signature(compactResults(Result,KeyType,RowType,ResultPrime)::'/impred':impred,annotation:changeMode([Result::'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr)),KeyType::'/bootstrap':type,RowType::'/bootstrap':type,ResultPrime::'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr))],'/bootstrap':vert))).
'/impred':clause(compactResults([],_,_,[]),'/impred':true).
annotation:shrink('/impred':clause(compactResults(['/nodalion':value(Fam,Key,List)|Result],RowType,KeyType,['/nodalion':value(Fam,Key,[Expr])|ResultPrime]),'/impred':conj('/impred':pred(sum(List,ExprPrime)),'/impred':conj(compact(ExprPrime,Expr),compactResults(Result,RowType,KeyType,ResultPrime))))).
annotation:shrink('/impred':clause(counterTrans(Table,Row::RowType,KeyType,Ops),'/impred':conj('/impred':pred(convertOps(Ops,KeyType,DbOps)),'/impred':conj('/impred':task('/nodalion':trans(Table,Row,DbOps),Result,'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr))),'/impred':conj(compactResults(Result,KeyType,RowType,ResultPrime),'/impred':pred(matchResults(Ops,KeyType,RowType,ResultPrime))))))).
'/bootstrap':signature(sum(Exprs,Expr)::'/bootstrap':pred,[Exprs::'/bootstrap':list(counterExpr),Expr::counterExpr]).
sum([],counterValue(0)):-builtin:true.
sum([A|B],counterPlus(A,BPrime)):-sum(B,BPrime).

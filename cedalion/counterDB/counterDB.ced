'/bootstrap':signature(counterOp(KeyType)::'/bootstrap':type,[KeyType::'/bootstrap':type]).
'/bootstrap':signature(counterTrans(Table,Row,KeyType,Ops)::'/impred':impred,[Table::'/bootstrap':string,Row::'/bootstrap':typedTerm,KeyType::'/bootstrap':type,Ops::'/bootstrap':list(counterOp(KeyType))]).
'/bootstrap':projection(counterTrans(Table,Row,KeyType,Ops)::'/impred':impred,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!on),'/bootstrap':vis(Table::'/bootstrap':string),'/bootstrap':label(!row),'/bootstrap':vis(Row::'/bootstrap':typedTerm),'/bootstrap':label(!'with keys of type'),'/bootstrap':vis(KeyType::'/bootstrap':type),'/bootstrap':label(!'do:')]),'/bootstrap':horiz(['/bootstrap':label(!'    '),cpi:vis(Ops::'/bootstrap':list(counterOp(KeyType)),'/bootstrap':vert)])])).
'/bootstrap':defAtom(versionID::_).
'/bootstrap':signature(versionID(UUID)::counterExpr,[UUID::'/bootstrap':string]).
'/util':behavior(counterTrans(Table,Row,KeyType,Ops)::'/impred':impred,!'should record a new UUID for each row operation','/impred':simulate(counterTrans(!tbl,!row::'/bootstrap':string,'/bootstrap':string,[]),['/impred':task('/impred':uuid,!abcd,'/bootstrap':string),'/impred':task('/nodalion':trans(!tbl,!row,['/nodalion':set(!'_meta',versionID,[versionID(!abcd)])]),[],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,_,counterExpr)))],'/impred':true)).
'/bootstrap':signature(convertOps(Ops,KeyType,DbOps)::'/bootstrap':pred,[Ops::'/bootstrap':list(counterOp(KeyType)),KeyType::'/bootstrap':type,DbOps::'/bootstrap':list('/nodalion':databaseOp(KeyType,counterExpr))]).
convertOps([],_,[]):-builtin:true.
annotation:shrink('/bootstrap':signature(matchResults(Ops,KeyType,RowType,Result)::'/bootstrap':pred,annotation:changeMode([Ops::'/bootstrap':list(counterOp(KeyType)),KeyType::'/bootstrap':type,RowType::'/bootstrap':type,Result::'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr))],'/bootstrap':vert))).
matchResults([],_,_,_):-builtin:true.
annotation:shrink('/bootstrap':signature(compactResults(Result,KeyType,RowType,ResultPrime,CompactionOpsIn,CompactionOpsOut)::'/impred':impred,annotation:changeMode([Result::'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr)),KeyType::'/bootstrap':type,RowType::'/bootstrap':type,ResultPrime::'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr)),CompactionOpsIn::'/bootstrap':list('/nodalion':databaseOp(KeyType,counterExpr)),CompactionOpsOut::'/bootstrap':list('/nodalion':databaseOp(KeyType,counterExpr))],'/bootstrap':vert))).
'/impred':clause(compactResults([],_,_,[],CompactionOps,CompactionOps),'/impred':true).
annotation:shrink('/impred':clause(compactResults(['/nodalion':value(Fam,Key,List)|Result],RowType,KeyType,['/nodalion':value(Fam,Key,[Expr])|ResultPrime],CompactionOpsIn,CompactionOpsOut),'/impred':conj('/impred':pred(sum(List,ExprPrime)),'/impred':conj(compact(ExprPrime,Expr),'/impred':conj(compactResults(Result,RowType,KeyType,ResultPrime,CompactionOpsIn,CompactionOpsMid),'/impred':pred(builtin:if(ExprPrime::counterExpr=Expr::counterExpr,CompactionOpsOut::'/bootstrap':list('/nodalion':databaseOp(RowType,counterExpr))=CompactionOpsMid::'/bootstrap':list('/nodalion':databaseOp(RowType,counterExpr)),CompactionOpsOut::'/bootstrap':list('/nodalion':databaseOp(RowType,counterExpr))=['/nodalion':set(Fam,Key,[Expr])|CompactionOpsMid]::'/bootstrap':list('/nodalion':databaseOp(RowType,counterExpr))))))))).
'/bootstrap':signature(skip(Impred)::'/impred':impred,[Impred::'/impred':impred]).
'/bootstrap':projection(skip(Impred)::'/impred':impred,'/bootstrap':horiz(['/bootstrap':label(! (//)),'/bootstrap':background('/bootstrap':vis(Impred::'/impred':impred),cpi:rgb(192,192,192))])).
'/impred':clause(skip(Impred),'/impred':true).
annotation:shrink('/impred':clause(counterTrans(Table,Row::RowType,KeyType,Ops),'/impred':conj('/impred':pred(convertOps(Ops,KeyType,DbOps)),'/impred':conj('/impred':conj('/impred':task('/impred':uuid,UUID,'/bootstrap':string),'/impred':task('/nodalion':trans(Table,Row,['/nodalion':set(!'_meta',versionID,[versionID(UUID)])|DbOps]),Result,'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr)))),'/impred':conj(compactResults(Result,KeyType,RowType,ResultPrime,[],CompactionOps),'/impred':conj('/impred':pred((matchResults(Ops,KeyType,RowType,ResultPrime),addNewValsToCompactionOps(CompactionOps,Ops,KeyType,CompactionOpsPrime))),'/impred':if('/impred':pred(CompactionOps::'/bootstrap':list('/nodalion':databaseOp(KeyType,counterExpr))=[_|_]::'/bootstrap':list(_)),'/impred':task('/impred':localEnqueue(!compaction,doSometime('/nodalion':trans(Table,Row,['/nodalion':check(!'_meta',versionID,[versionID(UUID)])|CompactionOpsPrime]),'/bootstrap':list('/nodalion':databaseValue(RowType,KeyType,counterExpr)))),_,'/nodalion':voidType),'/impred':true))))))).
'/bootstrap':signature(sum(Exprs,Expr)::'/bootstrap':pred,[Exprs::'/bootstrap':list(counterExpr),Expr::counterExpr]).
sum([],counterValue(0)):-builtin:true.
sum([Expr],Expr):-builtin:true.
sum([A,B|C],counterPlus(A,BC)):-sum([B|C],BC).
'/bootstrap':signature(doSometime(Task,T)::'/impred':localStoreVal,[Task::'/impred':task(T),T::'/bootstrap':type]).
'/bootstrap':projection(doSometime(Task,T)::'/impred':localStoreVal,'/bootstrap':horiz(['/bootstrap':label(!'do sometime'),'/bootstrap':vis(Task::'/impred':task(T)),'/bootstrap':label(! (::)),'/bootstrap':vis(T::'/bootstrap':type)])).
'/util':behavior(counterTrans(Table,Row,KeyType,Ops)::'/impred':impred,!'should enqueue compaction requests if compaction is in order','/impred':simulate(counterTrans(!tbl,!row::'/bootstrap':string,'/bootstrap':string,[add(!fam,!key,counterValue(3),X)]),['/impred':task('/impred':uuid,!xyz,'/bootstrap':string),'/impred':task('/nodalion':trans(!tbl,!row,['/nodalion':set(!'_meta',versionID,[versionID(!xyz)]),'/nodalion':append(!fam,!key,counterValue(3)),'/nodalion':get(!fam,!key)]),['/nodalion':value(!fam,!key,[counterValue(1),counterValue(2)])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,'/bootstrap':string,counterExpr))),'/impred':task('/impred':localEnqueue(!compaction,doSometime('/nodalion':trans(!tbl,!row,['/nodalion':check(!'_meta',versionID,[versionID(!xyz)]),'/nodalion':set(!fam,!key,[counterPlus(counterValue(3),counterValue(3))])]),'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,'/bootstrap':string,counterExpr)))),_,'/nodalion':voidType)],'/impred':true)).
annotation:shrink('/bootstrap':signature(addNewValsToCompactionOps(CompactionOps,Ops,KeyType,CompactionOpsPrime)::'/bootstrap':pred,annotation:changeMode([CompactionOps::'/bootstrap':list('/nodalion':databaseOp(KeyType,counterExpr)),Ops::'/bootstrap':list(counterOp(KeyType)),KeyType::'/bootstrap':type,CompactionOpsPrime::'/bootstrap':list('/nodalion':databaseOp(KeyType,counterExpr))],'/bootstrap':vert))).
addNewValsToCompactionOps([],_,_,[]):-builtin:true.
annotation:shrink((addNewValsToCompactionOps(['/nodalion':set(Family,Key,[ValueBefore])|OpsBefore],Ops,KeyType,['/nodalion':set(Family,Key,[ValueAfter])|OpsAfter]):-builtin:if('/bootstrap':listMember(add(Family,Key,NewValue,_),counterOp(KeyType),Ops),ValueAfter::counterExpr=counterPlus(ValueBefore,NewValue)::counterExpr,ValueAfter::counterExpr=ValueBefore::counterExpr),addNewValsToCompactionOps(OpsBefore,Ops,KeyType,OpsAfter))).

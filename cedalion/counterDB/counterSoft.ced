'/bootstrap':signature(counterSoft(Expr)::counterExpr,[Expr::counterExpr]).
'/bootstrap':projection(counterSoft(Expr)::counterExpr,'/bootstrap':horiz(['/bootstrap':label(! (?)),'/bootstrap':vis(Expr::counterExpr)])).
'/util':behavior(counterSoft(Expr)::counterExpr,!'should evaluate to both Expr and 0',builtin:findall(Value,'/bootstrap':number,'/impred':simulate(evalCounter(counterSoft(counterValue(5)),Value),[],'/impred':true),[5,0])).
'/impred':clause(evalCounter(counterSoft(Expr),Value),evalCounter(Expr,Value)).
'/impred':clause(evalCounter(counterSoft(Expr),0),'/impred':true).
'/util':behavior(counterSoft(Expr)::counterExpr,!'should not contribute to a combination of ranges', (possibleTransCombination(counterSoft(Expr),[seen(!thr,4)],Comb),builtin:equals(Comb::'/bootstrap':list('/impred':impred),[seen(!thr,4)]::'/bootstrap':list('/impred':impred)))).
possibleTransCombination(counterSoft(Expr),Comb,Comb):-builtin:true.
'/util':behavior(counterSoft(Expr)::counterExpr,!'should report all possible values of Expr, as well as 0',builtin:findall(Val,'/bootstrap':number,possibleValue(counterSoft(counterValue(3)),[],Val),[3,0])).
possibleValue(counterSoft(Expr),Cond,Val):-possibleValue(Expr,Cond,Val).
possibleValue(counterSoft(Expr),Cond,0):-builtin:true.

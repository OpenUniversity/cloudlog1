'/bootstrap':signature(counterPlus(A,B)::counterExpr,[A::counterExpr,B::counterExpr]).
'/bootstrap':projection(counterPlus(A,B)::counterExpr,'/bootstrap':horiz(['/bootstrap':vis(A::counterExpr),'/bootstrap':label(! (+)),'/bootstrap':vis(B::counterExpr)])).
'/util':behavior(counterPlus(A,B)::counterExpr,!'should evaluate to the sum of A and B', ('/impred':simulate(evalCounter(counterPlus(counterValue(2),counterValue(4)),V,_),[],'/impred':true),builtin:equals(V::'/bootstrap':number,6::'/bootstrap':number))).
'/impred':clause(evalCounter(counterPlus(A,B),V,Cond),'/impred':conj(evalCounter(A,APrime,Cond1),'/impred':conj(evalCounter(B,BPrime,Cond2),'/impred':pred((builtin:plus(APrime,BPrime,V),'/bootstrap':append(Cond1,Cond2,Cond,threadCond)))))).
'/util':behavior(counterPlus(A,B)::counterExpr,!'should concatenate the conditions of A and B', ('/impred':simulate('/impred':with(currentTransaction,!myTrans,'/bootstrap':string,evalCounter(counterPlus(counterIf(counterValue(2),!'thr1',3,700),counterIf(counterValue(4),!'thr2',7,600)),V,Cond)),['/impred':task('/impred':localGet(!'myTrans:thr1'),localNum(10),'/impred':localStoreVal),'/impred':task('/impred':localGet(!'myTrans:thr2'),localNum(10),'/impred':localStoreVal)],'/impred':true),builtin:equals(Cond::'/bootstrap':list(threadCond),[threadSeen(!'thr1',3),threadSeen(!'thr2',7)]::'/bootstrap':list(threadCond)))).

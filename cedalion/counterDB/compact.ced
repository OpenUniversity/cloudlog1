'/bootstrap':signature(compact(Expr,Comp)::'/impred':impred,[Expr::counterExpr,Comp::counterExpr]).
'/util':behavior(compact(Expr,Comp)::'/impred':impred,!'should leave a constant as is', ('/impred':simulate(compact(counterValue(3),Comp),[],'/impred':true),builtin:equals(Comp::counterExpr,counterValue(3)::counterExpr))).
'/impred':clause(compact(counterValue(Val),counterValue(Val)),'/impred':true).
'/util':behavior(compact(Expr,Comp)::'/impred':impred,!'should compute a sum of two constants', ('/impred':simulate(compact(counterPlus(counterValue(3),counterValue(4)),Comp),[],'/impred':true),builtin:equals(Comp::counterExpr,counterValue(7)::counterExpr))).
'/impred':clause(compact(counterPlus(A,B),C),'/impred':conj(compact(A,APrime),'/impred':conj(compact(B,BPrime),'/impred':if('/impred':pred(counterPlus(APrime,BPrime)::counterExpr=counterPlus(counterValue(APrimePrime),counterValue(BPrimePrime))::counterExpr),'/impred':pred((builtin:plus(APrimePrime,BPrimePrime,CPrimePrime),C::counterExpr=counterValue(CPrimePrime)::counterExpr)),'/impred':pred(C::counterExpr=counterPlus(APrime,BPrime)::counterExpr))))).
'/util':behavior(compact(Expr,Comp)::'/impred':impred,!'should only compact the arguments if they do not both sum to constants', ('/impred':simulate(compact(counterPlus(annotation:parentheses(counterPlus(counterValue(3),counterValue(5))),counterSoft(counterValue(4))),Comp),[],'/impred':true),builtin:equals(Comp::counterExpr,counterPlus(counterValue(8),counterSoft(counterValue(4)))::counterExpr))).
'/util':behavior(compact(Expr,Comp)::'/impred':impred,!'should compact the content of a soft expr', ('/impred':simulate(compact(counterSoft(counterPlus(counterValue(4),counterValue(2))),Comp),[],'/impred':true),builtin:equals(Comp::counterExpr,counterSoft(counterValue(6))::counterExpr))).
'/impred':clause(compact(counterSoft(X),counterSoft(Y)),compact(X,Y)).
'/util':behavior(compact(Expr,Comp)::'/impred':impred,!'should evaluate the expression undelying a condition, if the TS did not elapse', ('/impred':simulate('/impred':with('/impred':now,100,'/bootstrap':number,compact(counterIf(counterPlus(counterValue(2),counterValue(3)),!thr,1,200),Comp)),[],'/impred':true),builtin:equals(Comp::counterExpr,counterIf(counterValue(5),!thr,1,200)::counterExpr))).
annotation:shrink('/impred':clause(compact(counterIf(Expr,Thr,Trans,TS),Comp),'/impred':conj(compact(Expr,ExprPrime),'/impred':conj('/impred':task('/impred':now,Now,'/bootstrap':number),'/impred':if('/impred':pred(Now>TS),'/impred':if(seen(Thr,Trans),'/impred':pred(Comp::counterExpr=ExprPrime::counterExpr),'/impred':pred(Comp::counterExpr=counterValue(0)::counterExpr)),'/impred':pred(Comp::counterExpr=counterIf(ExprPrime,Thr,Trans,TS)::counterExpr)))))).
'/util':behavior(compact(Expr,Comp)::'/impred':impred,!'should remove the condition if the timeout elapsed', ('/impred':simulate('/impred':with('/impred':now,300,'/bootstrap':number,compact(counterIf(counterPlus(counterValue(2),counterValue(3)),!thr,1,200),Comp)),['/impred':task(currentTransaction,!myTrans,'/bootstrap':string),'/impred':task('/impred':localGet(!'myTrans:thr'),localNum(3),'/impred':localStoreVal)],'/impred':true),builtin:equals(Comp::counterExpr,counterValue(5)::counterExpr))).
'/util':behavior(compact(Expr,Comp)::'/impred':impred,!'should compact to 0 if the timeout elapsed and the transaction is not visible', ('/impred':simulate('/impred':with('/impred':now,300,'/bootstrap':number,compact(counterIf(counterPlus(counterValue(2),counterValue(3)),!thr,6,200),Comp)),['/impred':task(currentTransaction,!myTrans,'/bootstrap':string),'/impred':task('/impred':localGet(!'myTrans:thr'),localNum(4),'/impred':localStoreVal)],'/impred':true),builtin:equals(Comp::counterExpr,counterValue(0)::counterExpr))).

'/bootstrap':signature(transaction(Impred)::'/impred':impred,[Impred::'/impred':impred]).
'/bootstrap':projection(transaction(Impred)::'/impred':impred,'/bootstrap':vert(['/bootstrap':label(!'transaction:'),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':vis(Impred::'/impred':impred)])])).
'/util':behavior(transaction(Impred)::'/impred':impred,!'should execute Impred in a transaction', ('/impred':simulate('/impred':with('/impred':localGet(!thr),timedVal(2,300),'/impred':localStoreVal,'/impred':with('/impred':localDequeue(!threads),'/impred':localStr(!thr),'/impred':localStoreVal,'/impred':with('/impred':localQueueEmpty(!threads),'/impred':no,'/impred':yesno,transaction('/impred':pred(X::'/bootstrap':number=2::'/bootstrap':number))))),[],'/impred':true),builtin:equals(X::'/bootstrap':number,2::'/bootstrap':number))).
'/impred':clause(transaction(Impred),'/impred':conj('/impred':if('/impred':task('/impred':localQueueEmpty(!threads),'/impred':no,'/impred':yesno),'/impred':conj('/impred':task('/impred':localDequeue(!threads),'/impred':localStr(Thread),'/impred':localStoreVal),'/impred':task('/impred':localGet(Thread),timedVal(TransPrime,_),'/impred':localStoreVal)),'/impred':true),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(Thread),'/Functional':concat,'/Functional':'num2str'('/Functional':applyBinOp('/Functional':const(TransPrime),'/Functional':numPlus,'/Functional':const(1)))),'/bootstrap':string,TransID)),'/impred':with(currentTransaction,TransID,'/bootstrap':string,Impred)))).
'/util':behavior(transaction(Impred)::'/impred':impred,!'should get transaction ID from the queue','/impred':simulate('/impred':with('/impred':localQueueEmpty(!threads),'/impred':no,'/impred':yesno,'/impred':with('/impred':localDequeue(!threads),'/impred':localStr(!myThread),'/impred':localStoreVal,'/impred':with('/impred':localGet(!myThread),timedVal(3,800),'/impred':localStoreVal,transaction('/impred':task(currentTransaction,X,'/bootstrap':string))))),[],'/impred':true)).

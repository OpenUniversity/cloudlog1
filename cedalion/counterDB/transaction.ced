'/bootstrap':signature(transaction(Impred)::'/impred':impred,[Impred::'/impred':impred]).
'/bootstrap':projection(transaction(Impred)::'/impred':impred,'/bootstrap':vert(['/bootstrap':label(!'transaction:'),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':vis(Impred::'/impred':impred)])])).
'/util':behavior(transaction(Impred)::'/impred':impred,!'should execute Impred in a transaction', ('/impred':simulate('/impred':with('/impred':localEnqueue(!threads,'/impred':localStr(!thr)),_,'/nodalion':voidType,'/impred':with('/nodalion':kvsSet(!thr,!'3'),_,'/nodalion':voidType,'/impred':with('/impred':localSet(!thr,timedVal(3,0)),_,'/impred':localStoreVal,'/impred':with('/impred':localGet(!thr),timedVal(2,300),'/impred':localStoreVal,'/impred':with('/impred':localDequeue(!threads),'/impred':localStr(!thr),'/impred':localStoreVal,'/impred':with('/impred':localQueueEmpty(!threads),'/impred':no,'/impred':yesno,transaction('/impred':pred(X::'/bootstrap':number=2::'/bootstrap':number)))))))),[],'/impred':true),builtin:equals(X::'/bootstrap':number,2::'/bootstrap':number))).
'/impred':clause(transaction(Impred),'/impred':conj('/impred':task('/impred':localQueueEmpty(!threads),Empty,'/impred':yesno),'/impred':conj('/impred':if('/impred':pred(Empty::'/impred':yesno='/impred':no::'/impred':yesno),'/impred':conj('/impred':task('/impred':localDequeue(!threads),'/impred':localStr(Thread),'/impred':localStoreVal),'/impred':task('/impred':localGet(Thread),timedVal(Trans,_),'/impred':localStoreVal)),'/impred':conj('/impred':task('/impred':uuid,Thread,'/bootstrap':string),'/impred':pred(Trans::'/bootstrap':number=0::'/bootstrap':number))),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(Thread),'/Functional':concat,'/Functional':const(! (:))),'/Functional':concat,'/Functional':'num2str'('/Functional':applyBinOp('/Functional':const(Trans),'/Functional':numPlus,'/Functional':const(1)))),'/bootstrap':string,TransID)),'/impred':if('/impred':with(currentTransaction,TransID,'/bootstrap':string,Impred),'/impred':conj('/impred':pred(builtin:succ(Trans,TransPrime)),'/impred':conj('/impred':task('/impred':localSet(Thread,timedVal(TransPrime,0)),_,'/impred':localStoreVal),'/impred':conj('/impred':pred(builtin:rawTermToString(TransPrime::'/bootstrap':number,TransStr)),'/impred':conj('/impred':task('/nodalion':kvsSet(Thread,TransStr),_,'/nodalion':voidType),'/impred':task('/impred':localEnqueue(!threads,'/impred':localStr(Thread)),_,'/nodalion':voidType))))),'/impred':pred(builtin:fail)))))).
'/util':behavior(transaction(Impred)::'/impred':impred,!'should get transaction ID from the queue', ('/impred':simulate('/impred':with('/impred':localEnqueue(!threads,'/impred':localStr(!myThread)),_,'/nodalion':voidType,'/impred':with('/nodalion':kvsSet(!myThread,!'4'),_,'/nodalion':voidType,'/impred':with('/impred':localSet(!myThread,timedVal(4,0)),_,'/impred':localStoreVal,'/impred':with('/impred':localQueueEmpty(!threads),'/impred':no,'/impred':yesno,'/impred':with('/impred':localDequeue(!threads),'/impred':localStr(!myThread),'/impred':localStoreVal,'/impred':with('/impred':localGet(!myThread),timedVal(3,800),'/impred':localStoreVal,transaction('/impred':task(currentTransaction,X,'/bootstrap':string)))))))),[],'/impred':true),builtin:equals(X::'/bootstrap':string,!'myThread:4'::'/bootstrap':string))).
'/util':behavior(transaction(Impred)::'/impred':impred,!'should create a new thread if no thread is in the queue', ('/impred':simulate('/impred':with('/impred':localEnqueue(!threads,'/impred':localStr(!abcd)),_,'/nodalion':voidType,'/impred':with('/nodalion':kvsSet(!abcd,!'1'),_,'/nodalion':voidType,'/impred':with('/impred':localSet(!abcd,timedVal(1,0)),_,'/impred':localStoreVal,'/impred':with('/impred':localQueueEmpty(!threads),'/impred':yes,'/impred':yesno,'/impred':with('/impred':uuid,!abcd,'/bootstrap':string,transaction('/impred':task(currentTransaction,X,'/bootstrap':string))))))),[],'/impred':true),builtin:equals(X::'/bootstrap':string,!'abcd:1'::'/bootstrap':string))).
'/util':behavior(transaction(Impred)::'/impred':impred,!'should store the transaction in the KVS and local store upon successful completion','/impred':simulate('/impred':with('/impred':uuid,!abc,'/bootstrap':string,'/impred':with('/impred':localQueueEmpty(!threads),'/impred':yes,'/impred':yesno,transaction('/impred':true))),['/impred':task('/impred':localSet(!abc,timedVal(1,0)),_,'/impred':localStoreVal),'/impred':task('/nodalion':kvsSet(!abc,!'1'),_,'/nodalion':voidType),'/impred':task('/impred':localEnqueue(!threads,'/impred':localStr(!abc)),_,'/nodalion':voidType)],'/impred':true)).
'/util':behavior(transaction(Impred)::'/impred':impred,!'should return the thread to the queue upon completion','/impred':simulate('/impred':with('/nodalion':kvsSet(!abcd,!'1'),_,'/nodalion':voidType,'/impred':with('/impred':localSet(!abcd,timedVal(1,0)),_,'/impred':localStoreVal,'/impred':with('/impred':uuid,!abcd,'/bootstrap':string,'/impred':with('/impred':localQueueEmpty(!threads),'/impred':yes,'/impred':yesno,transaction('/impred':true))))),['/impred':task('/impred':localEnqueue(!threads,'/impred':localStr(!abcd)),_,'/nodalion':voidType)],'/impred':true)).
'/util':behavior(transaction(Impred)::'/impred':impred,!'should fail and record nothing if Impred fails','/impred':simulate('/impred':not('/impred':with('/impred':uuid,!abcd,'/bootstrap':string,'/impred':with('/impred':localQueueEmpty(!threads),'/impred':yes,'/impred':yesno,transaction('/impred':pred(builtin:fail))))),[],'/impred':true)).

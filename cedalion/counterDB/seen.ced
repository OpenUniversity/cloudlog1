'/bootstrap':signature(seen(Thread,Transaction)::'/impred':impred,[Thread::'/bootstrap':string,Transaction::'/bootstrap':number]).
'/bootstrap':projection(seen(Thread,Transaction)::'/impred':impred,'/bootstrap':horiz(['/bootstrap':vis(Thread::'/bootstrap':string),'/bootstrap':symbol(8805),'/bootstrap':vis(Transaction::'/bootstrap':number)])).
'/bootstrap':alias(seen(Thread,Transaction)::'/impred':impred,! (>=)).
'/bootstrap':signature('str2num'(TransPrime)::'/Functional':expr('/bootstrap':number),[TransPrime::'/bootstrap':string]).
'/Functional':eval('str2num'(Str),'/bootstrap':number,Num):-builtin:rawTermToString(Num::'/bootstrap':number,Str).
'/impred':clause(seen(Thread,Transaction),'/impred':if(currTransSeen(Thread,Trans),'/impred':pred('/Functional':ge('/Functional':const(Trans),'/Functional':const(Transaction),'/bootstrap':number)),'/impred':conj('/impred':eval('/impred':localGet(Thread,noValue),'/impred':localStoreVal,timedVal(Trans,TS)),'/impred':conj(threadKeyForCurrTrans(Thread,Key),'/impred':conj('/impred':task('/impred':localSet(Key,localNum(Trans)),_,'/impred':localStoreVal),'/impred':if('/impred':pred('/Functional':ge('/Functional':const(Trans),'/Functional':const(Transaction),'/bootstrap':number)),'/impred':true,'/impred':conj('/impred':task('/impred':now,Now,'/bootstrap':number),'/impred':if('/impred':pred(builtin:greaterThen(Now,TS)),'/impred':conj('/impred':task('/nodalion':kvsGet(Thread),TransPrime,'/bootstrap':string),'/impred':pred('/Functional':ge('str2num'(TransPrime),'/Functional':const(Transaction),'/bootstrap':number))),'/impred':pred(builtin:fail))))))))).
'/util':behavior(seen(Thread,Transaction)::'/impred':impred,!'should succeed if the current transaction has a value for Thread, and it is greater or equal Transaction','/impred':simulate('/impred':with(currentTransaction,!myTrans,'/bootstrap':string,'/impred':with('/impred':localGet(!'myTrans:someThread'),localNum(6),'/impred':localStoreVal,seen(!someThread,4))),[],'/impred':true)).
'/util':behavior(seen(Thread,Transaction)::'/impred':impred,!'should fail if the current transaction has a value for Thread, and it is smaller than Transaction','/impred':simulate('/impred':with(currentTransaction,!myTrans,'/bootstrap':string,'/impred':with('/impred':localGet(!'myTrans:someThread'),localNum(3),'/impred':localStoreVal,'/impred':not(seen(!someThread,4)))),[],'/impred':true)).
'/util':behavior(seen(Thread,Transaction)::'/impred':impred,!'should check if Thread has a value in local storage, if no specific value exists for the transaction','/impred':simulate('/impred':with(currentTransaction,!myTrans,'/bootstrap':string,'/impred':with('/impred':localGet(!'myTrans:someThread'),_,'/impred':localStoreVal,seen(!someThread,4))),[],'/impred':task('/impred':localGet(!someThread),_,'/impred':localStoreVal))).
'/bootstrap':signature(timedVal(Val,TS)::'/impred':localStoreVal,[Val::'/bootstrap':number,TS::'/bootstrap':number]).
'/bootstrap':projection(timedVal(Val,TS)::'/impred':localStoreVal,'/bootstrap':horiz(['/bootstrap':vis(Val::'/bootstrap':number),'/bootstrap':brackets('/bootstrap':vis(TS::'/bootstrap':number),40,41)])).
'/util':behavior(seen(Thread,Transaction)::'/impred':impred,!'should succeed if the value in local storage >= the needed value','/impred':simulate('/impred':with(currentTransaction,!myTrans,'/bootstrap':string,'/impred':with('/impred':localGet(!'myTrans:someThread'),_,'/impred':localStoreVal,'/impred':with('/impred':localGet(!someThread),timedVal(6,200),'/impred':localStoreVal,seen(!someThread,4)))),['/impred':task('/impred':localSet(!'myTrans:someThread',localNum(6)),_,'/impred':localStoreVal)],'/impred':true)).
'/util':behavior(seen(Thread,Transaction)::'/impred':impred,!'should fail if the value in local storage < the needed value and it is not stale','/impred':simulate('/impred':with(currentTransaction,!myTrans,'/bootstrap':string,'/impred':with('/impred':localGet(!'myTrans:someThread'),_,'/impred':localStoreVal,'/impred':with('/impred':localGet(!someThread),timedVal(3,200),'/impred':localStoreVal,'/impred':with('/impred':now,100,'/bootstrap':number,'/impred':not(seen(!someThread,4)))))),['/impred':task('/impred':localSet(!'myTrans:someThread',localNum(3)),_,'/impred':localStoreVal)],'/impred':true)).
'/util':behavior(seen(Thread,Transaction)::'/impred':impred,!'should consult the KVS if the value in local storage < the needed value and it is stale','/impred':simulate('/impred':with(currentTransaction,!myTrans,'/bootstrap':string,'/impred':with('/impred':localGet(!'myTrans:someThread'),_,'/impred':localStoreVal,'/impred':with('/impred':localGet(!someThread),timedVal(3,200),'/impred':localStoreVal,'/impred':with('/impred':now,300,'/bootstrap':number,seen(!someThread,4))))),['/impred':task('/impred':localSet(!'myTrans:someThread',localNum(3)),_,'/impred':localStoreVal)],'/impred':task('/nodalion':kvsGet(!someThread),_,'/bootstrap':string))).
'/util':behavior(seen(Thread,Transaction)::'/impred':impred,!'should succeed if the KVS value >= Transaction','/impred':simulate('/impred':with(currentTransaction,!myTrans,'/bootstrap':string,'/impred':with('/impred':localGet(!'myTrans:someThread'),_,'/impred':localStoreVal,'/impred':with('/impred':localGet(!someThread),timedVal(3,200),'/impred':localStoreVal,'/impred':with('/impred':now,300,'/bootstrap':number,'/impred':with('/nodalion':kvsGet(!someThread),!'6','/bootstrap':string,seen(!someThread,4)))))),['/impred':task('/impred':localSet(!'myTrans:someThread',localNum(3)),_,'/impred':localStoreVal)],'/impred':true)).
'/util':behavior(seen(Thread,Transaction)::'/impred':impred,!'should fail if the KVS value < Transaction','/impred':simulate('/impred':with(currentTransaction,!myTrans,'/bootstrap':string,'/impred':with('/impred':localGet(!'myTrans:someThread'),_,'/impred':localStoreVal,'/impred':with('/impred':localGet(!someThread),timedVal(3,200),'/impred':localStoreVal,'/impred':with('/impred':now,300,'/bootstrap':number,'/impred':with('/nodalion':kvsGet(!someThread),!'3','/bootstrap':string,'/impred':not(seen(!someThread,4))))))),['/impred':task('/impred':localSet(!'myTrans:someThread',localNum(3)),_,'/impred':localStoreVal)],'/impred':true)).
'/bootstrap':signature(currTransSeen(Thread,Transaction)::'/impred':impred,[Thread::'/bootstrap':string,Transaction::'/bootstrap':number]).
'/util':behavior(currTransSeen(Thread,Transaction)::'/impred':impred,!'should succeed if the current transaction saw a transaction value for Thread', ('/impred':simulate(currTransSeen(!someThr,Trans),['/impred':task(currentTransaction,!myTrans,'/bootstrap':string),'/impred':task('/impred':localGet(!'myTrans:someThr'),localNum(7),'/impred':localStoreVal)],'/impred':true),builtin:equals(Trans::'/bootstrap':number,7::'/bootstrap':number))).
'/bootstrap':signature(localNum(Num)::'/impred':localStoreVal,[Num::'/bootstrap':number]).
'/bootstrap':projection(localNum(Num)::'/impred':localStoreVal,'/bootstrap':horiz(['/bootstrap':label(!'#'),'/bootstrap':vis(Num::'/bootstrap':number)])).
'/bootstrap':adapter(Num::'/bootstrap':number,localNum(Num)::'/impred':localStoreVal).
'/bootstrap':defAtom(noValue::'/impred':localStoreVal).
annotation:shrink('/impred':clause(currTransSeen(Thread,Transaction),'/impred':conj('/impred':eval('/impred':call(currentTransaction),'/bootstrap':string,MyTrans),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(MyTrans),'/Functional':concat,'/Functional':const(! (:))),'/Functional':concat,'/Functional':const(Thread)),'/bootstrap':string,Key)),'/impred':eval('/impred':localGet(Key,noValue),'/impred':localStoreVal,localNum(Transaction)))))).
'/bootstrap':defAtom(currentTransaction::'/impred':task('/bootstrap':string)).
'/util':behavior(currTransSeen(Thread,Transaction)::'/impred':impred,!'should fail if the current transaction did not see Thread','/impred':simulate('/impred':not(currTransSeen(!someThr,Trans)),['/impred':task(currentTransaction,!myTrans,'/bootstrap':string),'/impred':task('/impred':localGet(!'myTrans:someThr'),_,'/impred':localStoreVal)],'/impred':true)).
'/bootstrap':signature(threadKeyForCurrTrans(Thread,Key)::'/impred':impred,[Thread::'/bootstrap':string,Key::'/bootstrap':string]).
'/impred':clause(threadKeyForCurrTrans(Thread,Key),'/impred':conj('/impred':eval('/impred':call(currentTransaction),'/bootstrap':string,MyTrans),'/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(MyTrans),'/Functional':concat,'/Functional':const(! (:))),'/Functional':concat,'/Functional':const(Thread)),'/bootstrap':string,Key)))).

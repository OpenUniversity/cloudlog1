'/bootstrap':defAtom(addition::'/bootstrap':type).
'/bootstrap':signature(dbTrans(Trans,Matches)::'/impred':impred,[Trans::'/bootstrap':list(addition),Matches::'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))]).
'/bootstrap':signature(addition(Axiom,Value)::addition,[Axiom::axiom,Value::'/bootstrap':number]).
'/bootstrap':projection(addition(Axiom,Value)::addition,'/bootstrap':horiz(['/bootstrap':vis(Axiom::axiom),'/bootstrap':label(!'+='),'/bootstrap':vis(Value::'/bootstrap':number)])).
'/util':behavior(dbTrans(Trans,Matches)::'/impred':impred,!'should perform Trans as a single row transaction','/impred':simulate(dbTrans([addition(example:someFact(1,4),1),addition(example:someFact(1,3),-1)],_),['/impred':task('/nodalion':trans(!'example#someFact',1,['/nodalion':get(!master,version),'/nodalion':getAllCounters(!rules),'/nodalion':addToCounter(!facts,example:someFact(1,4),1),'/nodalion':addToCounter(!facts,example:someFact(1,3),-1)]),_,'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,_)))],'/impred':true)).
'/bootstrap':signature(inconsistentTransaction(Trans)::'/bootstrap':exception,[Trans::'/bootstrap':list(addition)]).
'/bootstrap':projection(inconsistentTransaction(Trans)::'/bootstrap':exception,'/bootstrap':horiz(['/bootstrap':label(!'inconsistent transaction:'),'/bootstrap':vis(Trans::'/bootstrap':list(addition))])).
'/bootstrap':defAtom(emptyTransaction::'/bootstrap':exception).
'/impred':clause(dbTrans(Trans,Matches),'/impred':if('/impred':pred(transOps(Trans,Table,Row::T,MatchFamily,Ops,_,[])),'/impred':if('/impred':pred(builtin:var(Table::'/bootstrap':string)),'/impred':pred(builtin:throw(emptyTransaction)),'/impred':task('/nodalion':trans(Table,Row,['/nodalion':get(!master,version),'/nodalion':getAllCounters(MatchFamily)|Ops]),Matches,'/bootstrap':list('/nodalion':databaseValue(T,axiom,_)))),'/impred':pred(builtin:throw(inconsistentTransaction(Trans))))).
'/util':behavior(dbTrans(Trans,Matches)::'/impred':impred,!'should return all members of the matching family', ('/impred':simulate(dbTrans([addition(example:someFact(1,4),1),addition(example:someFact(1,3),-1)],Matches),['/impred':task('/nodalion':trans(!'example#someFact',1,_),annotation:changeMode(['/nodalion':value(!master,version,[!foo]),'/nodalion':counterValue(!rules,rule(example:someFact(1,X),builtin:true,example:someFact(X,2)),1)],'/bootstrap':vert),'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':string)))],'/impred':true),'/util':assertEqual(Matches,annotation:changeMode(['/nodalion':value(!master,version,[!foo]),'/nodalion':counterValue(!rules,rule(example:someFact(1,X),builtin:true,example:someFact(X,2)),1)],'/bootstrap':vert),'/bootstrap':list('/nodalion':databaseValue(_,axiom,'/bootstrap':string))))).
'/bootstrap':signature(transOps(Additions,Table,TRow,MatchFamily,Ops,TakenAdditions,RejAdditions)::'/bootstrap':pred,[Additions::'/bootstrap':list(addition),Table::'/bootstrap':string,TRow::'/bootstrap':typedTerm,MatchFamily::'/bootstrap':string,Ops::'/bootstrap':list('/nodalion':databaseOp(axiom,_)),TakenAdditions::'/bootstrap':list(addition),RejAdditions::'/bootstrap':list(addition)]).
'/util':behavior(transOps(Additions,Table,TRow,MatchFamily,Ops,TakenAdditions,RejAdditions)::'/bootstrap':pred,!'should unify TakenAdditions with all additions in agreement with the first addition on Table/TRow and MatchFamily', (transOps([addition(example:someFact(1,X),1),addition(example:someFact(2,X),1)],_,_::_,_,_,TakenAdditions,_),'/util':assertEqual(TakenAdditions,[addition(example:someFact(1,X),1)],'/bootstrap':list(addition)))).
'/util':behavior(transOps(Additions,Table,TRow,MatchFamily,Ops,TakenAdditions,RejAdditions)::'/bootstrap':pred,!'should unify RejAdditions with all additions not in agreement with the first addition on Table/TRow and MatchFamily', (transOps([addition(example:someFact(1,X),1),addition(example:someFact(2,X),1)],_,_::_,_,_,_,RejAdditions),'/util':assertEqual(RejAdditions,[addition(example:someFact(2,X),1)],'/bootstrap':list(addition)))).
transOps([],_,_,_,[],[],[]):-builtin:true.
annotation:shrink((transOps([addition(Axiom,Value)|Trans],Table,Row::T,MatchFamily,Ops,TakenAdditions,RejAdditions):-builtin:if(annotation:parentheses((tableName(Axiom,Table),axiomFamily(Axiom,Family,Row::T),match(Axiom,_,MatchFamily))), (TakenAdditions::'/bootstrap':list(addition)=[addition(Axiom,Value)|TakenAdditionsPrime]::'/bootstrap':list(addition),Ops::'/bootstrap':list('/nodalion':databaseOp(axiom,Tau))=['/nodalion':addToCounter(Family,Axiom,Value)|OpsPrime]::'/bootstrap':list('/nodalion':databaseOp(axiom,Tau)),RejAdditions::'/bootstrap':list(addition)=RejAdditionsPrime::'/bootstrap':list(addition)), (TakenAdditions::'/bootstrap':list(addition)=TakenAdditionsPrime::'/bootstrap':list(addition),Ops::'/bootstrap':list('/nodalion':databaseOp(axiom,Tau))=OpsPrime::'/bootstrap':list('/nodalion':databaseOp(axiom,Tau)),RejAdditions::'/bootstrap':list(addition)=[addition(Axiom,Value)|RejAdditionsPrime]::'/bootstrap':list(addition))),transOps(Trans,Table,Row::T,MatchFamily,OpsPrime,TakenAdditionsPrime,RejAdditionsPrime))).

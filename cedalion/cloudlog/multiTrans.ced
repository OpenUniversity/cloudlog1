'/bootstrap':signature(multiTrans(Trans)::'/impred':impred,[Trans::'/bootstrap':list(addition)]).
'/util':behavior(multiTrans(Trans)::'/impred':impred,!'should enqueue a transaction of consistent axioms','/impred':simulate(multiTrans([addition(example:someFact(1,11),1),addition(example:someFact(1,12),-1)]),['/impred':task('/nodalion':enqueue(!wq,trans([addition(example:someFact(1,11),1),addition(example:someFact(1,12),-1)]),'/impred':impred),_,'/nodalion':voidType)],'/impred':true)).
'/util':behavior(multiTrans(Trans)::'/impred':impred,!'should enqueue separate transaction for inconsistent axioms','/impred':simulate(multiTrans([addition(example:someFact(1,11),1),addition(example:someFact(2,11),-1)]),['/impred':task('/nodalion':enqueue(!wq,trans([addition(example:someFact(1,11),1)]),'/impred':impred),_,'/nodalion':voidType),'/impred':task('/nodalion':enqueue(!wq,trans([addition(example:someFact(2,11),-1)]),'/impred':impred),_,'/nodalion':voidType)],'/impred':true)).
'/util':behavior(multiTrans(Trans)::'/impred':impred,!'should enqueue separate transaction for master rules', ('/impred':simulate(multiTrans([addition(rule(example:someFact(1,11),builtin:true,example:someFact(1,12)),1),addition(rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),-1)]),['/impred':task('/nodalion':enqueue(!wq,trans(Trans1),'/impred':impred),_,'/nodalion':voidType),'/impred':task('/nodalion':enqueue(!wq,masterTrans(Trans2),'/impred':impred),_,'/nodalion':voidType)],_),'/util':assertEqual(Trans1,[addition(rule(example:someFact(1,11),builtin:true,example:someFact(1,12)),1)],'/bootstrap':list(addition)),'/util':assertEqual(Trans2,[addition(rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),-1)],'/bootstrap':list(addition)))).
'/util':behavior(multiTrans(Trans)::'/impred':impred,!'should enqueue separate transactions for master rules for different tables', ('/impred':simulate(multiTrans([addition(rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1),addition(rule(clause(example:somePred([A],B),true),builtin:true,example:someFact(B,A)),-1)]),['/impred':task('/nodalion':enqueue(!wq,masterTrans(Trans1),'/impred':impred),_,'/nodalion':voidType),'/impred':task('/nodalion':enqueue(!wq,masterTrans(Trans2),'/impred':impred),_,'/nodalion':voidType)],_),'/util':assertEqual(Trans1,[addition(rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)],'/bootstrap':list(addition)),'/util':assertEqual(Trans2,[addition(rule(clause(example:somePred([A],B),true),builtin:true,example:someFact(B,A)),-1)],'/bootstrap':list(addition)))).
'/impred':clause(multiTrans([]),'/impred':true).
annotation:shrink('/impred':clause(multiTrans([First|Rest]),'/impred':conj('/impred':pred(Trans::'/bootstrap':list(addition)=[First|Rest]::'/bootstrap':list(addition)),'/impred':conj('/impred':pred(transOps(Trans,_,_,_,_,Taken,Rej)),'/impred':if('/impred':pred(Taken::'/bootstrap':list(addition)=[_|_]::'/bootstrap':list(addition)),'/impred':conj('/nodalion':enqueueJob(trans(Taken)),multiTrans(Rej)),multiMasterTrans(Rej)))))).
'/bootstrap':signature(multiMasterTrans(Additions)::'/impred':impred,[Additions::'/bootstrap':list(addition)]).
'/impred':clause(multiMasterTrans(Additions),'/impred':if('/impred':pred(Additions::'/bootstrap':list(addition)=[_|_]::'/bootstrap':list(addition)),'/impred':conj('/impred':pred(sameTable(Additions,_,Taken,Rej)),'/impred':conj('/nodalion':enqueueJob(masterTrans(Taken)),multiMasterTrans(Rej))),'/impred':true)).
'/bootstrap':signature(sameTable(Additions,Table,Taken,Rej)::'/bootstrap':pred,[Additions::'/bootstrap':list(addition),Table::'/bootstrap':string,Taken::'/bootstrap':list(addition),Rej::'/bootstrap':list(addition)]).
sameTable([],_,[],[]):-builtin:true.
annotation:shrink((sameTable([addition(Axiom,Value)|Additions],Table,Taken,Rej):-builtin:if(tableName(Axiom,Table), (Taken::'/bootstrap':list(addition)=[addition(Axiom,Value)|TakenPrime]::'/bootstrap':list(addition),Rej::'/bootstrap':list(addition)=RejPrime::'/bootstrap':list(addition)), (Taken::'/bootstrap':list(addition)=TakenPrime::'/bootstrap':list(addition),Rej::'/bootstrap':list(addition)=[addition(Axiom,Value)|RejPrime]::'/bootstrap':list(addition))),sameTable(Additions,Table,TakenPrime,RejPrime))).

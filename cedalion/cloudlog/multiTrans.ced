'/bootstrap':signature(multiTrans(Trans)::'/impred':impred,[Trans::'/bootstrap':list(addition)]).
'/util':behavior(multiTrans(Trans)::'/impred':impred,!'should enqueue a transaction of consistent axioms','/impred':simulate(multiTrans([addition(example:someFact(1,11),1),addition(example:someFact(1,12),-1)]),['/impred':task('/nodalion':enqueue(!wq,trans([addition(example:someFact(1,11),1),addition(example:someFact(1,12),-1)]),'/impred':impred),_,'/nodalion':voidType)],'/impred':true)).
'/util':behavior(multiTrans(Trans)::'/impred':impred,!'should enqueue separate transaction for inconsistent axioms','/impred':simulate(multiTrans([addition(example:someFact(1,11),1),addition(example:someFact(2,11),-1)]),['/impred':task('/nodalion':enqueue(!wq,trans([addition(example:someFact(1,11),1)]),'/impred':impred),_,'/nodalion':voidType),'/impred':task('/nodalion':enqueue(!wq,trans([addition(example:someFact(2,11),-1)]),'/impred':impred),_,'/nodalion':voidType)],'/impred':true)).
'/impred':clause(multiTrans([]),'/impred':true).
annotation:shrink('/impred':clause(multiTrans([First|Rest]),'/impred':conj('/impred':pred(Trans::'/bootstrap':list(addition)=[First|Rest]::'/bootstrap':list(addition)),'/impred':conj('/impred':pred(transOps(Trans,_,_,_,_,Taken,Rej)),'/impred':conj('/nodalion':enqueueJob(trans(Taken)),multiTrans(Rej)))))).

'/bootstrap':signature(updateMaster(Table,Row,Type,NewVer)::'/impred':impred,[Table::'/bootstrap':string,Row::Type,Type::'/bootstrap':type,NewVer::'/bootstrap':string]).
'/util':behavior(updateMaster(Table,Row,Type,NewVer)::'/impred':impred,!'should update the version and query for the version and all facts','/impred':simulate(updateMaster(!tbl,2,'/bootstrap':number,!'ver2'),['/impred':task('/nodalion':trans(!tbl,2,['/nodalion':set(!master,version,[!'ver2']),'/nodalion':get(!master,version),'/nodalion':getAllCounters(!facts)]),['/nodalion':value(!master,version,[!'ver1'])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':string)))],_)).
'/util':behavior(updateMaster(Table,Row,Type,NewVer)::'/impred':impred,!'should apply the difference between the desired version and the existing one to the facts in the row','/impred':simulate('/impred':with('/impred':localGet(!'ver2'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(2,X),builtin:true,example:someFact(X,2)),1)]),'/impred':localStoreVal,'/impred':with('/impred':localGet(!'ver1'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(2,X),builtin:true,example:someFact(X,1)),1)]),'/impred':localStoreVal,updateMaster(!tbl,2,'/bootstrap':number,!'ver2'))),['/impred':task('/nodalion':trans(!tbl,2,['/nodalion':set(!master,version,[!'ver2']),'/nodalion':get(!master,version),'/nodalion':getAllCounters(!facts)]),annotation:changeMode(['/nodalion':value(!master,version,[!'ver1']),'/nodalion':counterValue(!facts,example:someFact(2,2),1),'/nodalion':counterValue(!facts,example:someFact(2,3),1)],'/bootstrap':vert),'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':string))),'/impred':task('/nodalion':par('/nodalion':findAll('/nodalion':enqueueJob(trans([addition(example:someFact(2,2),1)])),'/nodalion':enqueueJob(trans([addition(example:someFact(2,2),1)]))),'/nodalion':findAll(enqueueAdditions([addition(example:someFact(2,1),-1),addition(example:someFact(3,2),1),addition(example:someFact(3,1),-1)]),enqueueAdditions([addition(example:someFact(2,1),-1),addition(example:someFact(3,2),1),addition(example:someFact(3,1),-1)]))),'/bootstrap':pair(_,_),'/bootstrap':pairType('/bootstrap':list('/impred':impred),'/bootstrap':list('/impred':impred)))],'/impred':true)).
annotation:shrink('/impred':clause(updateMaster(Table,Row,Type,NewVer),'/impred':conj('/impred':task('/nodalion':trans(Table,Row,['/nodalion':set(!master,version,[NewVer]),'/nodalion':get(!master,version),'/nodalion':getAllCounters(!facts)]),Results,'/bootstrap':list('/nodalion':databaseValue(Type,axiom,'/bootstrap':string))),'/impred':conj(getMasterRules(Results,OldRules),'/impred':conj(getMasterRules(['/nodalion':value(!master,version,[NewVer])],NewRules),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp(dbResults(Results),mult,annotation:parentheses('/Functional':applyBinOp(dbResults(NewRules),minus,dbResults(OldRules)))),'/bootstrap':list(addition),Additions)),enqueueAdditions(Additions))))))).

'/bootstrap':signature(updateMaster(Table,Row,Type,NewVer)::'/impred':impred,[Table::'/bootstrap':string,Row::Type,Type::'/bootstrap':type,NewVer::'/bootstrap':number]).
'/util':behavior(updateMaster(Table,Row,Type,NewVer)::'/impred':impred,!'should update the version and query for the version and all facts','/impred':simulate(updateMaster(!tbl,2,'/bootstrap':number,9),['/impred':task('/nodalion':trans(!tbl,2,['/nodalion':set(!master,version,[9]),'/nodalion':get(!master,version),'/nodalion':getAllCounters(!facts),'/nodalion':getAllCounters(!rules)]),['/nodalion':value(!master,version,[7])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':number)))],_)).
'/util':behavior(updateMaster(Table,Row,Type,NewVer)::'/impred':impred,!'should apply the difference between the desired version and the existing one to the facts in the row','/impred':simulate('/impred':with('/impred':localGet(!'tbl:9:facts'),masterRules([]),'/impred':localStoreVal,'/impred':with('/impred':localGet(!'tbl:7:facts'),masterRules([]),'/impred':localStoreVal,'/impred':with('/impred':localGet(!'tbl:9:rules'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(2,X),builtin:true,example:someFact(X,2)),1)]),'/impred':localStoreVal,'/impred':with('/impred':localGet(!'tbl:7:rules'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(2,X),builtin:true,example:someFact(X,1)),1)]),'/impred':localStoreVal,updateMaster(!tbl,2,'/bootstrap':number,9))))),['/impred':task('/nodalion':trans(!tbl,2,_),annotation:changeMode(['/nodalion':value(!master,version,[7]),'/nodalion':counterValue(!facts,example:someFact(2,2),1),'/nodalion':counterValue(!facts,example:someFact(2,3),1)],'/bootstrap':vert),'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':number))),'/impred':task('/nodalion':enqueue(!wq,trans([addition(example:someFact(2,2),1),addition(example:someFact(2,1),-1)]),'/impred':impred),_,'/nodalion':voidType),'/impred':task('/nodalion':enqueue(!wq,trans([addition(example:someFact(3,2),1),addition(example:someFact(3,1),-1)]),'/impred':impred),_,'/nodalion':voidType)],'/impred':true)).
'/bootstrap':unitTest('/impred':simulate('/impred':with('/impred':localGet(!'tbl:9:rules'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(2,X),builtin:true,example:someFact(X,2)),1)]),'/impred':localStoreVal,'/impred':with('/impred':localGet(!'tbl:7:rules'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(2,X),builtin:true,example:someFact(X,1)),1)]),'/impred':localStoreVal,updateMaster(!tbl,2,'/bootstrap':number,9))),['/impred':task('/nodalion':trans(!tbl,2,['/nodalion':set(!master,version,[9]),'/nodalion':get(!master,version),'/nodalion':getAllCounters(!facts),'/nodalion':getAllCounters(!rules)]),annotation:changeMode(['/nodalion':value(!master,version,[7]),'/nodalion':counterValue(!facts,example:someFact(2,2),1),'/nodalion':counterValue(!facts,example:someFact(2,3),1)],'/bootstrap':vert),'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':number)))],'/impred':task('/impred':localGet(!'tbl:7:facts'),masterRules(_),'/impred':localStoreVal))).
annotation:shrink('/impred':clause(updateMaster(Table,Row,Type,NewVer),'/impred':conj('/impred':task('/nodalion':trans(Table,Row,['/nodalion':set(!master,version,[NewVer]),'/nodalion':get(!master,version),'/nodalion':getAllCounters(!facts),'/nodalion':getAllCounters(!rules)]),Results,'/bootstrap':list('/nodalion':databaseValue(Type,axiom,'/bootstrap':number))),'/impred':conj('/impred':pred(getVersion(Results,OldVer)),'/impred':conj(getMasterAxioms(Table,!rules,OldVer,OldRules),'/impred':conj(getMasterAxioms(Table,!rules,NewVer,NewRules),'/impred':conj(getMasterAxioms(Table,!facts,OldVer,OldFacts),'/impred':conj(getMasterAxioms(Table,!facts,NewVer,NewFacts),'/impred':conj('/nodalion':callWithContainers('/Functional':eval('/Functional':applyBinOp(dbResults(Results),mult,annotation:parentheses('/Functional':applyBinOp(annotation:parentheses('/Functional':applyBinOp(dbResults(NewRules),plus,dbResults(NewFacts))),minus,annotation:parentheses('/Functional':applyBinOp(dbResults(OldRules),plus,dbResults(OldFacts)))))),'/bootstrap':list(addition),Additions)),multiTrans(Additions)))))))))).

'/bootstrap':signature(dbResults(Results)::'/Functional':expr('/bootstrap':list(addition)),[Results::'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))]).
'/bootstrap':projection(dbResults(Results)::'/Functional':expr('/bootstrap':list(addition)),'/bootstrap':lineBorder('/bootstrap':vis(Results::'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))),1,cpi:rgb(192,192,192))).
'/bootstrap':adapter(Results::'/bootstrap':list('/nodalion':databaseValue(_,axiom,_)),dbResults(Results)::'/Functional':expr('/bootstrap':list(addition))).
'/util':behavior(dbResults(Results)::'/Functional':expr('/bootstrap':list(addition)),!'should convert database results into additions', ('/Functional':eval(dbResults(['/nodalion':counterValue(!facts,example:someFact(1,2),1),'/nodalion':counterValue(!facts,example:someFact(2,3),1)]),'/bootstrap':list(addition),Additions),'/util':assertEqual(Additions,[addition(example:someFact(1,2),1),addition(example:someFact(2,3),1)],'/bootstrap':list(addition)))).
'/Functional':def(dbResults([]),'/bootstrap':list(addition),'/Functional':const([])).
'/Functional':def(dbResults(['/nodalion':counterValue(_,Axiom,Value)|Results]),'/bootstrap':list(addition),cons('/Functional':const(addition(Axiom,Value)),dbResults(Results))).
'/bootstrap':signature(cons(First,Rest)::'/Functional':expr('/bootstrap':list(T)),[First::'/Functional':expr(T),Rest::'/Functional':expr('/bootstrap':list(T))]).
'/bootstrap':projection(cons(First,Rest)::'/Functional':expr('/bootstrap':list(T)),'/bootstrap':horiz(['/bootstrap':vis(First::'/Functional':expr(T)),'/bootstrap':label(! (:)),'/bootstrap':vis(Rest::'/Functional':expr('/bootstrap':list(T)))])).
'/util':behavior(cons(First,Rest)::'/Functional':expr('/bootstrap':list(T)),!'should construct a list out of expressions','/Functional':eval(cons('/Functional':applyBinOp('/Functional':const(1),'/Functional':numPlus,'/Functional':const(2)),'/Functional':const([2,1])),'/bootstrap':list('/bootstrap':number),List)).
'/Functional':def(cons(First,Rest),'/bootstrap':list(T),'/Functional':where('/Functional':const([FirstPrime|RestPrime]), ('/Functional':eval(First,T,FirstPrime),'/Functional':eval(Rest,'/bootstrap':list(T),RestPrime)))).

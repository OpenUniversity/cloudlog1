'/bootstrap':defAtom(plus::'/Functional':binOp('/bootstrap':list(addition))).
'/bootstrap':projection(plus::'/Functional':binOp('/bootstrap':list(addition)),'/bootstrap':label(! (+))).
'/util':behavior(plus::'/Functional':binOp('/bootstrap':list(addition)),!'should result to the second argument if the first argument is an empty list', ('/Functional':eval('/Functional':applyBinOp('/Functional':const([]),plus,'/Functional':const([addition(example:someFact(1,3),2),addition(example:someFact(1,4),-1)])),'/bootstrap':list(addition),Result),'/util':assertEqual(Result,[addition(example:someFact(1,3),2),addition(example:someFact(1,4),-1)],'/bootstrap':list(addition)))).
'/util':behavior(plus::'/Functional':binOp('/bootstrap':list(addition)),!'should concatenate the two arguments if they have distinct axioms', ('/Functional':eval('/Functional':applyBinOp('/Functional':const([addition(example:someFact(1,3),2)]),plus,'/Functional':const([addition(example:someFact(1,4),-1)])),'/bootstrap':list(addition),Result),'/util':assertEqual(Result,[addition(example:someFact(1,3),2),addition(example:someFact(1,4),-1)],'/bootstrap':list(addition)))).
'/util':behavior(plus::'/Functional':binOp('/bootstrap':list(addition)),!'should merge additions of the same axiom', ('/Functional':eval('/Functional':applyBinOp('/Functional':const([addition(example:someFact(1,4),2)]),plus,'/Functional':const([addition(example:someFact(3,4),3),addition(example:someFact(1,4),-1)])),'/bootstrap':list(addition),Result),'/util':assertEqual(Result,[addition(example:someFact(1,4),1),addition(example:someFact(3,4),3)],'/bootstrap':list(addition)))).
'/util':behavior(plus::'/Functional':binOp('/bootstrap':list(addition)),!'should remove axioms with zero value', ('/Functional':eval('/Functional':applyBinOp('/Functional':const([addition(example:someFact(1,4),1)]),plus,'/Functional':const([addition(example:someFact(1,4),-1)])),'/bootstrap':list(addition),Result),'/util':assertEqual(Result,[],'/bootstrap':list(addition)))).
'/Functional':def('/Functional':applyBinOp(A,plus,B),'/bootstrap':list(addition),'/Functional':where('/Functional':const(C), ('/Functional':eval(A,'/bootstrap':list(addition),APrime),'/Functional':eval(B,'/bootstrap':list(addition),BPrime),addAdditions(APrime,BPrime,C)))).
'/bootstrap':signature(addAdditions(A,B,C)::'/bootstrap':pred,[A::'/bootstrap':list(addition),B::'/bootstrap':list(addition),C::'/bootstrap':list(addition)]).
addAdditions([],B,B):-builtin:true.
annotation:shrink((addAdditions([addition(Axiom,Value)|A],B,CPrime):-builtin:if(findAddition(B,Axiom,ValuePrime,BPrime), ('/Functional':eval('/Functional':applyBinOp('/Functional':const(Value),'/Functional':numPlus,'/Functional':const(ValuePrime)),'/bootstrap':number,ValuePrimePrime),builtin:if(builtin:equals(ValuePrimePrime::'/bootstrap':number,0::'/bootstrap':number),CPrime::'/bootstrap':list(addition)=C::'/bootstrap':list(addition),CPrime::'/bootstrap':list(addition)=[addition(Axiom,ValuePrimePrime)|C]::'/bootstrap':list(addition))), (BPrime::'/bootstrap':list(addition)=B::'/bootstrap':list(addition),CPrime::'/bootstrap':list(addition)=[addition(Axiom,Value)|C]::'/bootstrap':list(addition))),addAdditions(A,BPrime,C))).
'/bootstrap':signature(findAddition(B,Axiom,ValuePrime,BPrime)::'/bootstrap':pred,[B::'/bootstrap':list(addition),Axiom::axiom,ValuePrime::'/bootstrap':number,BPrime::'/bootstrap':list(addition)]).
annotation:shrink((findAddition([addition(Axiom,Value)|Rest],AxiomPrime,ValuePrime,Remaining):-builtin:if(builtin:structurallyEqual(Axiom::axiom,AxiomPrime::axiom), (ValuePrime::'/bootstrap':number=Value::'/bootstrap':number,Remaining::'/bootstrap':list(addition)=Rest::'/bootstrap':list(addition)), (Remaining::'/bootstrap':list(addition)=[addition(Axiom,Value)|RemainingPrime]::'/bootstrap':list(addition),findAddition(Rest,AxiomPrime,ValuePrime,RemainingPrime))))).

'/bootstrap':signature(multValues(A,B,C)::'/bootstrap':pred,[A::'/bootstrap':list(counterValue),B::'/bootstrap':list(counterValue),C::'/bootstrap':list(counterValue)]).
'/bootstrap':projection(multValues(A,B,C)::'/bootstrap':pred,'/bootstrap':horiz(['/bootstrap':vis(C::'/bootstrap':list(counterValue)),'/bootstrap':label(! (=)),'/bootstrap':vis(A::'/bootstrap':list(counterValue)),'/bootstrap':label(! (*)),'/bootstrap':vis(B::'/bootstrap':list(counterValue))])).
'/bootstrap':alias(multValues(A,B,C)::'/bootstrap':pred,!'= *').
'/util':behavior(multValues(A,B,C)::'/bootstrap':pred,!'should assign C=[] if A=[]', (multValues([],[baseVal(3)],Res),builtin:equals(Res::'/bootstrap':list(counterValue),[]::'/bootstrap':list(counterValue)))).
'/util':behavior(multValues(A,B,C)::'/bootstrap':pred,!'should assign C=[] if B=[]', (multValues([baseVal(3)],[],Res),builtin:equals(Res::'/bootstrap':list(counterValue),[]::'/bootstrap':list(counterValue)))).
'/util':behavior(multValues(A,B,C)::'/bootstrap':pred,!'should multiply base values', (multValues([baseVal(3)],[baseVal(4)],Res),builtin:equals(Res::'/bootstrap':list(counterValue),[baseVal(12)]::'/bootstrap':list(counterValue)))).
'/util':behavior(multValues(A,B,C)::'/bootstrap':pred,!'should multiply base with inc', (multValues([baseVal(3)],[inc(2,!sess,[vcEntry(!foo,3)],1234)],Res),builtin:equals(Res::'/bootstrap':list(counterValue),[inc(6,!sess,[vcEntry(!foo,3)],1234)]::'/bootstrap':list(counterValue)))).
'/util':behavior(multValues(A,B,C)::'/bootstrap':pred,!'should multiply increments', (multValues([inc(2,!sess,[vcEntry(!foo,3)],1234)],[inc(3,!'sess2',[vcEntry(!bar,4)],1235)],Res),builtin:equals(Res::'/bootstrap':list(counterValue),[inc(6,!'',[vcEntry(!foo,3),vcEntry(!bar,4)],1235)]::'/bootstrap':list(counterValue)))).
multValues(A,B,C):-'/Functional':eval(annotation:shrink('/Functional':where('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':applyBinOp(annotation:parentheses('/Functional':if(BaseC>0,'/Functional':const([baseVal(BaseC)]),'/Functional':const([]))),counterValuePlus,'/Functional':const(BI)),counterValuePlus,'/Functional':const(IB)),counterValuePlus,'/Functional':const(II)), (baseVal(A,BaseA,APrime),baseVal(B,BaseB,BPrime),'/Functional':eval('/Functional':applyBinOp('/Functional':const(BaseA),'/Functional':times,'/Functional':const(BaseB)),'/bootstrap':number,BaseC),builtin:if(BaseB>0,multIncs(APrime,BaseB,BI),BI::'/bootstrap':list(counterValue)=[]::'/bootstrap':list(counterValue)),builtin:if(BaseA>0,multIncs(BPrime,BaseA,IB),IB::'/bootstrap':list(counterValue)=[]::'/bootstrap':list(counterValue)),'multValues2'(APrime,BPrime,II)))),'/bootstrap':list(counterValue),C).
'/bootstrap':signature('multValues2'(A,B,C)::'/bootstrap':pred,[A::'/bootstrap':list(counterValue),B::'/bootstrap':list(counterValue),C::'/bootstrap':list(counterValue)]).
'multValues2'([],_,[]):-builtin:true.
'multValues2'(_,[],[]):-builtin:true.
annotation:shrink(('multValues2'([inc(A,S1,VC1,TS1)|R1],[inc(B,S2,VC2,TS2)|R2],Res):-builtin:mult(A,B,C),'/bootstrap':append(VC1,VC2,VC,vcElem),'/Functional':eval('/Functional':max('/Functional':const(TS1),'/Functional':const(TS2)),'/bootstrap':number,TS),multValues(R1,[inc(B,S2,VC2,TS2)|R2],Res1),addValues([inc(C,!'',VC,TS)],Res1,Res))).
'/util':behavior(multValues(A,B,C)::'/bootstrap':pred,!'should multiply multiple entries', (multValues([inc(2,!sess,[vcEntry(!foo,3)],1234),inc(4,!sess,[vcEntry(!food,5)],1236)],[inc(3,!'sess2',[vcEntry(!bar,4)],1235)],Res),builtin:equals(Res::'/bootstrap':list(counterValue),annotation:changeMode([inc(6,!'',[vcEntry(!foo,3),vcEntry(!bar,4)],1235),inc(12,!'',[vcEntry(!food,5),vcEntry(!bar,4)],1236)],'/bootstrap':vert)::'/bootstrap':list(counterValue)))).
'/util':behavior(multValues(A,B,C)::'/bootstrap':pred,!'should be able to mix baseVals and incs',multValues([baseVal(2),inc(4,!sess,[vcEntry(!food,5)],1236)],[inc(3,!'sess2',[vcEntry(!bar,4)],1235)],Res)).
'/bootstrap':signature(multIncs(Incs,Mult,IncsPrime)::'/bootstrap':pred,[Incs::'/bootstrap':list(counterValue),Mult::'/bootstrap':number,IncsPrime::'/bootstrap':list(counterValue)]).
multIncs([inc(Inc,Sess,VC,TS)|Incs],Mult,[inc(IncPrime,Sess,VC,TS)|IncsPrime]):-builtin:mult(Inc,Mult,IncPrime),multIncs(Incs,Mult,IncsPrime).
multIncs([],_,[]):-builtin:true.

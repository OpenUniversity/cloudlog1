'/bootstrap':defAtom(cloudlog::'/parsing':lexicalContext).
'/util':behavior(identifier(ID)::'/parsing':token(cloudlog),!'should tokenize identifiers', ('/parsing':parseString('/parsing':tokens(List,cloudlog),!'aA b2 c_3'),'/util':assertEqual(List,[identifier(!aA),identifier(!'b2'),identifier(!'c_3')],'/bootstrap':list('/parsing':token(cloudlog))))).
'/bootstrap':signature(identifier(ID)::'/parsing':token(cloudlog),[ID::'/bootstrap':string]).
'/parsing':tokenDef(identifier(ID),'/parsing':follow('/parsing':bind('/parsing':follow(annotation:parentheses('/parsing':alt('/parsing':alt('/parsing':charRange(!a,!z),'/parsing':charRange(!'A',!'Z')),'/parsing':char(!'_'))),'/parsing':oneOrMoreMax(annotation:parentheses('/parsing':alt('/parsing':alt('/parsing':alt('/parsing':charRange(!a,!z),'/parsing':charRange(!'A',!'Z')),'/parsing':charRange(!'0',!'9')),'/parsing':char(!'_'))))),Codes),'/parsing':pred(builtin:charCodes(ID,Codes))),cloudlog).
'/bootstrap':signature(number(Num)::'/parsing':token(cloudlog),[Num::'/bootstrap':number]).
'/util':behavior(number(Num)::'/parsing':token(cloudlog),!'should tokenize numbers', ('/parsing':parseString('/parsing':tokens(List,cloudlog),!'11e-1 2.22 -3e+3'),'/util':assertEqual(List,[number(1.1),number(2.22),number(-3000.0)],'/bootstrap':list('/parsing':token(cloudlog))))).
'/parsing':tokenDef(number(Num),'/parsing':follow('/parsing':bind('/parsing':follow('/parsing':follow('/parsing':opt('/parsing':char(! (-))),'/parsing':follow('/parsing':oneOrMoreMax('/parsing':charRange(!'0',!'9')),'/parsing':opt(annotation:parentheses('/parsing':follow('/parsing':char(!.),'/parsing':oneOrMoreMax('/parsing':charRange(!'0',!'9'))))))),'/parsing':opt(annotation:parentheses('/parsing':follow('/parsing':follow('/parsing':char(!e),annotation:parentheses('/parsing':alt('/parsing':char(! (+)),'/parsing':char(! (-))))),'/parsing':oneOrMoreMax('/parsing':charRange(!'0',!'9')))))),Codes),'/parsing':pred((builtin:charCodes(Str,Codes),builtin:rawTermToString(Num::'/bootstrap':number,Str)))),cloudlog).
'/bootstrap':signature(string(Str)::'/parsing':token(cloudlog),[Str::'/bootstrap':string]).
'/util':behavior(string(Str)::'/parsing':token(cloudlog),!'should literally, parse string literals', ('/parsing':parseString('/parsing':tokens(List,cloudlog),!'"foo" "bar"'),'/util':assertEqual(List,[string(!foo),string(!bar)],'/bootstrap':list('/parsing':token(cloudlog))))).
'/bootstrap':signature(stringBody(Codes)::'/parsing':pattern('/bootstrap':number),[Codes::'/bootstrap':list('/bootstrap':number)]).
'/parsing':tokenDef(string(Str),'/parsing':follow('/parsing':follow('/parsing':char(!'"'),'/parsing':follow('/parsing':bind(stringBody(Codes),Codes),'/parsing':pred(builtin:charCodes(Str,Codes)))),'/parsing':char(!'"')),cloudlog).
'/util':behavior(stringBody(Codes)::'/parsing':pattern('/bootstrap':number),!'should handle escape characters', ('/parsing':parse(stringBody(Codes),[33,92,34],'/bootstrap':number,[]),'/util':assertEqual(Codes,[33,34],'/bootstrap':list('/bootstrap':number)))).
'/util':behavior(stringBody(Codes)::'/parsing':pattern('/bootstrap':number),!'should handle backslash-n', ('/parsing':parse(stringBody(Codes),[92,110],'/bootstrap':number,[]),'/util':assertEqual(Codes,[10],'/bootstrap':list('/bootstrap':number)))).
'/util':behavior(stringBody(Codes)::'/parsing':pattern('/bootstrap':number),!'should handle backslash-t', ('/parsing':parse(stringBody(Codes),[92,116],'/bootstrap':number,[]),'/util':assertEqual(Codes,[9],'/bootstrap':list('/bootstrap':number)))).
'/parsing':prod(stringBody([First|Rest]),'/bootstrap':number,'/parsing':follow('/parsing':alt('/parsing':follow('/parsing':bind('/parsing':not(!'"'),[First]),'/parsing':pred(\+First::'/bootstrap':number=92::'/bootstrap':number)),escapeSeq(First)),stringBody(Rest))).
'/parsing':prod(stringBody([]),'/bootstrap':number,'/parsing':empty).
'/bootstrap':signature(escapeSeq(First)::'/parsing':pattern('/bootstrap':number),[First::'/bootstrap':number]).
'/parsing':prod(escapeSeq(Char),'/bootstrap':number,'/parsing':follow('/parsing':terminal(92),'/parsing':if(escapeChar(Char),'/parsing':empty,'/parsing':terminal(Char)))).
'/bootstrap':signature(escapeChar(Char)::'/parsing':pattern('/bootstrap':number),[Char::'/bootstrap':number]).
'/parsing':prod(escapeChar(10),'/bootstrap':number,'/parsing':char(!n)).
'/parsing':prod(escapeChar(9),'/bootstrap':number,'/parsing':char(!t)).

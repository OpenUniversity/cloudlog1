'/bootstrap':signature(withSimulate(Axioms,Goal)::'/bootstrap':pred,[Axioms::'/bootstrap':list(axiom),Goal::pred]).
'/bootstrap':projection(withSimulate(Axioms,Goal)::'/bootstrap':pred,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!'with:'),cpi:vis(Axioms::'/bootstrap':list(axiom),'/bootstrap':vert)]),'/bootstrap':horiz(['/bootstrap':label(!simulate),'/bootstrap':vis(Goal::pred)])])).
'/util':behavior(withSimulate(Axioms,Goal)::'/bootstrap':pred,!'should succeed for true',withSimulate([],true)).
'/util':behavior(withSimulate(Axioms,Goal)::'/bootstrap':pred,!'should evaluate local goals', (withSimulate([],local(N::'/bootstrap':number=1::'/bootstrap':number)),'/util':assertEqual(N,1,'/bootstrap':number))).
'/util':behavior(withSimulate(Axioms,Goal)::'/bootstrap':pred,!'should evaluate goals based on clauses in Axioms', (withSimulate([clause(example:somePred(X,Y),local('/bootstrap':listMember(Y,'/bootstrap':number,X)))],example:somePred([2],Z)),'/util':assertEqual(Z,2,'/bootstrap':number))).
'/util':behavior(withSimulate(Axioms,Goal)::'/bootstrap':pred,!'should evaluate conjunctions', (withSimulate([],conj(local(builtin:succ(1,X)),local(builtin:succ(X,Y)))),'/util':assertEqual(Y,3,'/bootstrap':number))).
'/util':behavior(withSimulate(Axioms,Goal)::'/bootstrap':pred,!'should handle negation', (withSimulate([],conj(local('/bootstrap':listMember(X,'/bootstrap':number,[1,2])),not(local('/bootstrap':listMember(X,'/bootstrap':number,[1,3]))))),'/util':assertEqual(X,2,'/bootstrap':number))).
'/util':behavior(withSimulate(Axioms,Goal)::'/bootstrap':pred,!'should take rule propagation into account', (withSimulate([cloudlog:index(0,myKey(X),bar(X,_)),bar(1,2),bar(2,1)],'/cl1':indexed(myKey(2),Y)),'/util':assertEqual(Y,bar(2,1),axiom))).
withSimulate(Axioms,G):-initialAdditions(Axioms,Initial),applicationClosure(Initial,Additions),builtin:findall(clause(Head,Body),axiom,'/bootstrap':listMember(addition(clause(Head,Body),_),addition,Additions),Clauses),evaluateGoal(G,Clauses).
'/bootstrap':signature(initialAdditions(Axioms,Initial)::'/bootstrap':pred,[Axioms::'/bootstrap':list(axiom),Initial::'/bootstrap':list(addition)]).
initialAdditions(Axioms,Initial):-builtin:findall(addition(A,1),addition,'/bootstrap':listMember(A,axiom,Axioms),Sim),builtin:findall(addition(A,1),addition,isAxiom(A),Program),builtin:findall(addition(A,1),addition,genericRuleForTable(A,_),Generic),'/Functional':eval('/Functional':applyBinOp('/Functional':const(Generic),plus,'/Functional':applyBinOp('/Functional':const(Program),plus,'/Functional':const(Sim))),'/bootstrap':list(addition),Initial).
'/bootstrap':signature(evaluateGoal(G,Axioms)::'/bootstrap':pred,[G::pred,Axioms::'/bootstrap':list(axiom)]).
annotation:shrink((evaluateGoal(G,Axioms):-builtin:if(G::pred=true::pred,builtin:true,builtin:if(G::pred=local(GPrime)::pred,GPrime,builtin:if(G::pred=annotation:parentheses(conj(G1,G2))::pred, (evaluateGoal(G1,Axioms),evaluateGoal(G2,Axioms)),builtin:if(G::pred=not(G1)::pred,\+evaluateGoal(G1,Axioms), ('/bootstrap':listMember(clause(G,Body),axiom,Axioms),evaluateGoal(Body,Axioms)))))))).
'/util':behavior(applicationClosure(Initial,Additions)::'/bootstrap':pred,!'should unify Additions with a list of both the elements of Initial and all possible products', (applicationClosure([addition(example:someFact(1,2),1),addition(rule(example:someFact(1,Y),builtin:true,example:someFact(Y,1)),1)],List),'/bootstrap':listMember(addition(example:someFact(2,1),_),addition,List),'/bootstrap':listMember(addition(example:someFact(1,2),_),addition,List))).
'/bootstrap':signature(applicationClosure(Initial,Additions)::'/bootstrap':pred,[Initial::'/bootstrap':list(addition),Additions::'/bootstrap':list(addition)]).
applicationClosure(Input,Output):-simDBInsert(Input,[],Output).
'/bootstrap':signature(simDBInsert(Input,DB,Output)::'/bootstrap':pred,[Input::'/bootstrap':list(addition),DB::'/bootstrap':list(addition),Output::'/bootstrap':list(addition)]).
simDBInsert([],DB,DB):-builtin:true.
simDBInsert([First|Rest],DB,Output):-'/Functional':eval('/Functional':applyBinOp('/Functional':const(Rest),plus,annotation:parentheses('/Functional':applyBinOp('/Functional':const([First]),mult,'/Functional':const(DB)))),'/bootstrap':list(addition),RestPrime),simDBInsert(RestPrime,[First|DB],Output).

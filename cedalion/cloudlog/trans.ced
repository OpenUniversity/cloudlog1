'/bootstrap':signature(trans(Trans)::'/impred':impred,[Trans::'/bootstrap':list(addition)]).
'/util':behavior(trans(Trans)::'/impred':impred,!'should perform a transaction in the database','/impred':simulate(trans([addition(example:someFact(1,3),-1),addition(example:someFact(1,5),1)]),['/impred':task('/nodalion':trans(!'example#someFact',1,['/nodalion':getAll(!rules),'/nodalion':addToCounter(!facts,example:someFact(1,3),-1),'/nodalion':addToCounter(!facts,example:someFact(1,5),1)]),[],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,_)))],'/impred':true)).
'/impred':clause(trans(Trans),'/impred':conj(dbTrans(Trans,Matches),'/impred':true)).
'/bootstrap':disabled('/util':behavior(trans(Trans)::'/impred':impred,!'should queue derived transactions','/impred':simulate('/impred':with('/nodalion':trans(!'example#someFact',1,['/nodalion':getAll(!rules),'/nodalion':addToCounter(!facts,example:someFact(1,3),-1),'/nodalion':addToCounter(!facts,example:someFact(1,5),1)]),['/nodalion':counterValue(!rules,rule(example:someFact(1,X),builtin:true,example:someFact(X,2)),1)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,_)),trans([addition(example:someFact(1,3),-1),addition(example:someFact(1,5),1)])),[_],'/impred':true))).
'/bootstrap':signature(derivedAddition(Trans,Matches,T,Derived)::'/bootstrap':pred,[Trans::'/bootstrap':list(addition),Matches::'/bootstrap':list('/nodalion':databaseValue(T,axiom,_)),T::'/bootstrap':type,Derived::addition]).
'/util':behavior(derivedAddition(Trans,Matches,T,Derived)::'/bootstrap':pred,!'should succeed for each derived addition', (builtin:findall(Addition,addition,derivedAddition(annotation:changeMode([addition(example:someFact(1,3),-1),addition(example:someFact(1,5),1)],'/bootstrap':vert),annotation:changeMode(['/nodalion':counterValue(!rules,rule(example:someFact(1,X),builtin:true,example:someFact(X,2)),1),'/nodalion':counterValue(!rules,rule(example:someFact(1,X),builtin:true,example:someFact(X,5)),2)],'/bootstrap':vert),'/bootstrap':number,Addition),Additions),'/util':assertEqual(Additions,annotation:changeMode([addition(example:someFact(3,2),-1),addition(example:someFact(3,5),-2),addition(example:someFact(5,2),1),addition(example:someFact(5,5),2)],'/bootstrap':vert),'/bootstrap':list(addition)))).
derivedAddition(Trans,Matches,T,addition(Derived,DerivedValue)):-'/bootstrap':listMember(addition(Axiom,Value),addition,Trans),'/bootstrap':listMember('/nodalion':counterValue(_,Match,MatchValue),'/nodalion':databaseValue(T,axiom,_),Matches),applyMatch(Axiom,Match,Derived),'/Functional':eval('/Functional':applyBinOp('/Functional':const(Value),'/Functional':times,'/Functional':const(MatchValue)),'/bootstrap':number,DerivedValue).

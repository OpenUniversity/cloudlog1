'/bootstrap':signature(trans(Trans)::'/impred':impred,[Trans::'/bootstrap':list(addition)]).
'/bootstrap':defAtom(version::axiom).
'/util':behavior(trans(Trans)::'/impred':impred,!'should perform a transaction in the database','/impred':simulate(trans([addition(example:someFact(1,3),-1),addition(example:someFact(1,5),1)]),['/impred':task('/nodalion':trans(!'example#someFact',1,['/nodalion':get(!master,version),'/nodalion':getAllCounters(!rules),'/nodalion':addToCounter(!facts,example:someFact(1,3),-1),'/nodalion':addToCounter(!facts,example:someFact(1,5),1)]),['/nodalion':value(!master,version,[])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':number)))],_)).
'/impred':clause(trans(Trans),'/impred':conj(dbTrans(Trans,Matches),'/impred':conj('/impred':pred((Trans::'/bootstrap':list(addition)=[addition(Axiom,_)|_]::'/bootstrap':list(addition),tableName(Axiom,Table))),'/impred':conj('/impred':pred(getVersion(Matches,Version)),'/impred':conj(getMasterRules(Table,Version,MasterRules),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(Trans),mult,annotation:parentheses('/Functional':applyBinOp('/Functional':applyBinOp(dbResults(Matches),plus,dbResults(MasterRules)),plus,genericRulesForTable(Table)))),'/bootstrap':list(addition),Additions)),'/impred':conj(enqueueAdditions(Additions),checkMasterVersion(Axiom,Version)))))))).
'/util':behavior(trans(Trans)::'/impred':impred,!'should queue derived transactions','/impred':simulate('/impred':with('/nodalion':trans(!'example#someFact',1,_),['/nodalion':value(!master,version,[]),'/nodalion':counterValue(!rules,rule(example:someFact(1,X),builtin:true,example:someFact(X,2)),1)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':string)),trans([addition(example:someFact(1,3),-1),addition(example:someFact(1,5),1)])),['/impred':task(annotation:shrink('/nodalion':par('/nodalion':findAll('/nodalion':enqueueJob(trans([addition(example:someFact(3,2),-1)])),'/nodalion':enqueueJob(trans([addition(example:someFact(3,2),-1)]))),'/nodalion':findAll(enqueueAdditions([addition(example:someFact(5,2),1)]),enqueueAdditions([addition(example:someFact(5,2),1)])))),'/bootstrap':pair(_,_),'/bootstrap':pairType('/bootstrap':list('/impred':impred),'/bootstrap':list('/impred':impred)))],_)).
'/bootstrap':signature(masterRules(Rules)::'/impred':localStoreVal,[Rules::'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))]).
'/util':behavior(trans(Trans)::'/impred':impred,!'should consider master rules for fact transactions','/impred':simulate(trans([addition(example:someFact(1,3),1)]),['/impred':task('/nodalion':trans(!'example#someFact',1,_),['/nodalion':value(!master,version,[6])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':number))),'/impred':task('/impred':localGet(!'example#someFact:6'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),2)]),'/impred':localStoreVal),'/impred':task('/nodalion':par('/nodalion':findAll('/nodalion':enqueueJob(trans([addition(example:someFact(3,1),2)])),'/nodalion':enqueueJob(trans([addition(example:someFact(3,1),2)]))),'/nodalion':findAll(enqueueAdditions([]),enqueueAdditions([]))),'/bootstrap':pair(_,_),'/bootstrap':pairType('/bootstrap':list('/impred':impred),'/bootstrap':list('/impred':impred)))],_)).
'/bootstrap':signature(num(Num)::'/impred':localStoreVal,[Num::'/bootstrap':number]).
'/bootstrap':projection(num(Num)::'/impred':localStoreVal,'/bootstrap':horiz(['/bootstrap':label(!'#'),'/bootstrap':vis(Num::'/bootstrap':number)])).
'/bootstrap':adapter(Num::'/bootstrap':number,num(Num)::'/impred':localStoreVal).
'/util':behavior(trans(Trans)::'/impred':impred,!'should enqueue updateMaster if the row version is less than the table\'s version in local storage','/impred':simulate(trans([addition(example:someFact(1,3),1)]),['/impred':task('/nodalion':trans(!'example#someFact',1,_),['/nodalion':value(!master,version,[7])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':number))),'/impred':task('/impred':localGet(!'example#someFact:7'),masterRules([]),'/impred':localStoreVal),'/impred':task('/impred':localGet(!'example#someFact:ver'),num(9),'/impred':localStoreVal),'/impred':task('/nodalion':enqueue(!wq,updateMaster(!'example#someFact',1,'/bootstrap':number,9),'/impred':impred),_,'/nodalion':voidType)],'/impred':true)).
'/bootstrap':signature(enqueueAdditions(Additions)::'/impred':impred,[Additions::'/bootstrap':list(addition)]).
'/impred':clause(enqueueAdditions([]),'/impred':true).
'/impred':clause(enqueueAdditions([Add|Adds]),'/nodalion':parallel('/nodalion':enqueueJob(trans([Add])),enqueueAdditions(Adds))).
'/bootstrap':signature(getVersion(Matches,Version)::'/bootstrap':pred,[Matches::'/bootstrap':list('/nodalion':databaseValue(_,axiom,'/bootstrap':number)),Version::'/bootstrap':number]).
annotation:shrink((getVersion(Matches,Version):-builtin:if('/bootstrap':listMember('/nodalion':value(!master,version,[Version]),'/nodalion':databaseValue(_,axiom,'/bootstrap':number),Matches),builtin:true,Version::'/bootstrap':number=0::'/bootstrap':number))).
'/bootstrap':signature(genericRule(Rule)::'/bootstrap':statement,[Rule::axiom]).
'/bootstrap':projection(genericRule(Rule)::'/bootstrap':statement,'/bootstrap':horiz(['/bootstrap':label(!'generic:'),'/bootstrap':vis(Rule::axiom)])).
genericRule(rule(example:someFact(77,X),builtin:true,example:someFact(X,77))).
'/util':behavior(trans(Trans)::'/impred':impred,!'should consider generic rules','/impred':simulate(trans([addition(example:someFact(77,4),1)]),['/impred':task('/nodalion':trans(!'example#someFact',77,_),[],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,_))),'/impred':task('/nodalion':par('/nodalion':findAll('/nodalion':enqueueJob(trans([addition(example:someFact(4,77),1)])),'/nodalion':enqueueJob(trans([addition(example:someFact(4,77),1)]))),'/nodalion':findAll(enqueueAdditions([]),enqueueAdditions([]))),'/bootstrap':pair(_,_),'/bootstrap':pairType('/bootstrap':list('/impred':impred),'/bootstrap':list('/impred':impred)))],_)).
'/bootstrap':signature(genericRulesForTable(Table)::'/Functional':expr('/bootstrap':list(addition)),[Table::'/bootstrap':string]).
'/bootstrap':signature(genericRuleForTable(Rule,Table)::'/bootstrap':pred,[Rule::axiom,Table::'/bootstrap':string]).
genericRule(Rule)~>genericRuleForTable(Rule,Table):-tableName(Rule,Table).
'/Functional':eval(genericRulesForTable(Table),'/bootstrap':list(addition),Additions):-builtin:findall(addition(Rule,1),addition,genericRuleForTable(Rule,Table),Additions).

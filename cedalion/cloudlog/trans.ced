'/bootstrap':signature(trans(Trans)::'/impred':impred,[Trans::'/bootstrap':list(addition)]).
'/bootstrap':defAtom(version::axiom).
'/util':behavior(trans(Trans)::'/impred':impred,!'should perform a transaction in the database','/impred':simulate(trans([addition(example:someFact(1,3),-1),addition(example:someFact(1,5),1)]),['/impred':task('/nodalion':trans(!'example#someFact',1,['/nodalion':get(!master,version),'/nodalion':getAll(!rules),'/nodalion':addToCounter(!facts,example:someFact(1,3),-1),'/nodalion':addToCounter(!facts,example:someFact(1,5),1)]),['/nodalion':value(!master,version,[!''])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':string)))],'/impred':true)).
'/impred':clause(trans(Trans),'/impred':conj(dbTrans(Trans,Matches),'/impred':conj(getMasterRules(Matches,MasterRules),'/impred':conj('/impred':pred(builtin:findall(Addition,addition,annotation:shrink('/bootstrap':or(derivedAddition(Trans,Matches,_,Addition),derivedAddition(Trans,MasterRules,_,Addition))),Additions)),enqueueAdditions(Additions))))).
'/util':behavior(trans(Trans)::'/impred':impred,!'should queue derived transactions','/impred':simulate('/impred':with('/nodalion':trans(!'example#someFact',1,_),['/nodalion':value(!master,version,[!'']),'/nodalion':counterValue(!rules,rule(example:someFact(1,X),builtin:true,example:someFact(X,2)),1)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':string)),trans([addition(example:someFact(1,3),-1),addition(example:someFact(1,5),1)])),['/impred':task(annotation:shrink('/nodalion':par('/nodalion':findAll('/nodalion':enqueueJob(trans([addition(example:someFact(3,2),-1)])),'/nodalion':enqueueJob(trans([addition(example:someFact(3,2),-1)]))),'/nodalion':findAll(enqueueAdditions([addition(example:someFact(5,2),1)]),enqueueAdditions([addition(example:someFact(5,2),1)])))),'/bootstrap':pair(_,_),'/bootstrap':pairType('/bootstrap':list('/impred':impred),'/bootstrap':list('/impred':impred)))],'/impred':true)).
'/bootstrap':signature(masterRules(Rules)::'/impred':localStoreVal,[Rules::'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))]).
'/util':behavior(trans(Trans)::'/impred':impred,!'should consider master rules for fact transactions','/impred':simulate(trans([addition(example:someFact(1,3),1)]),['/impred':task('/nodalion':trans(!'example#someFact',1,_),['/nodalion':value(!master,version,[!'ver1'])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,'/bootstrap':string))),'/impred':task('/impred':localGet(!'ver1'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),2)]),'/impred':localStoreVal),'/impred':task('/nodalion':par('/nodalion':findAll('/nodalion':enqueueJob(trans([addition(example:someFact(3,1),2)])),'/nodalion':enqueueJob(trans([addition(example:someFact(3,1),2)]))),'/nodalion':findAll(enqueueAdditions([]),enqueueAdditions([]))),'/bootstrap':pair(_,_),'/bootstrap':pairType('/bootstrap':list('/impred':impred),'/bootstrap':list('/impred':impred)))],'/impred':true)).
'/bootstrap':signature(derivedAddition(Trans,Matches,T,Derived)::'/bootstrap':pred,[Trans::'/bootstrap':list(addition),Matches::'/bootstrap':list('/nodalion':databaseValue(T,axiom,_)),T::'/bootstrap':type,Derived::addition]).
'/util':behavior(derivedAddition(Trans,Matches,T,Derived)::'/bootstrap':pred,!'should succeed for each derived addition', (builtin:findall(Addition,addition,derivedAddition(annotation:changeMode([addition(example:someFact(1,3),-1),addition(example:someFact(1,5),1)],'/bootstrap':vert),annotation:changeMode(['/nodalion':counterValue(!rules,rule(example:someFact(1,X),builtin:true,example:someFact(X,2)),1),'/nodalion':counterValue(!rules,rule(example:someFact(1,4),builtin:true,example:someFact(3,5)),2),'/nodalion':counterValue(!rules,rule(example:someFact(1,X),builtin:true,example:someFact(X,5)),2)],'/bootstrap':vert),'/bootstrap':number,Addition),Additions),'/util':assertEqual(Additions,annotation:changeMode([addition(example:someFact(3,2),-1),addition(example:someFact(3,5),-2),addition(example:someFact(5,2),1),addition(example:someFact(5,5),2)],'/bootstrap':vert),'/bootstrap':list(addition)))).
annotation:shrink((derivedAddition(Trans,Matches,T,addition(Derived,DerivedValue)):-'/bootstrap':listMember(addition(Axiom,Value),addition,Trans),'/bootstrap':listMember('/nodalion':counterValue(_,Match,MatchValue),'/nodalion':databaseValue(T,axiom,_),Matches),applyMatch(Axiom,Match,Derived),'/Functional':eval('/Functional':applyBinOp('/Functional':const(Value),'/Functional':times,'/Functional':const(MatchValue)),'/bootstrap':number,DerivedValue))).
'/bootstrap':signature(enqueueAdditions(Additions)::'/impred':impred,[Additions::'/bootstrap':list(addition)]).
'/impred':clause(enqueueAdditions([]),'/impred':true).
'/impred':clause(enqueueAdditions([Add|Adds]),'/nodalion':parallel('/nodalion':enqueueJob(trans([Add])),enqueueAdditions(Adds))).

'/bootstrap':signature(minus(Additions)::'/Functional':expr('/bootstrap':list(addition)),[Additions::'/Functional':expr('/bootstrap':list(addition))]).
'/bootstrap':projection(minus(Additions)::'/Functional':expr('/bootstrap':list(addition)),'/bootstrap':horiz(['/bootstrap':label(! (-)),'/bootstrap':vis(Additions::'/Functional':expr('/bootstrap':list(addition)))])).
'/util':behavior(minus(Additions)::'/Functional':expr('/bootstrap':list(addition)),!'should return an empty list for an empty list', ('/Functional':eval(minus('/Functional':const([])),'/bootstrap':list(addition),Result),'/util':assertEqual(Result,[],'/bootstrap':list(addition)))).
'/util':behavior(minus(Additions)::'/Functional':expr('/bootstrap':list(addition)),!'should negate the values', ('/Functional':eval(minus('/Functional':const([addition(example:someFact(1,2),1),addition(example:someFact(2,1),-1)])),'/bootstrap':list(addition),Result),'/util':assertEqual(Result,[addition(example:someFact(1,2),-1),addition(example:someFact(2,1),1)],'/bootstrap':list(addition)))).
'/Functional':def(minus(A),'/bootstrap':list(addition),'/Functional':switch(A,'/bootstrap':list(addition),'/Functional':case([addition(Axiom,Value)|Rest],annotation:shrink('/Functional':where(cons('/Functional':const(addition(Axiom,MinusValue)),annotation:parentheses(minus('/Functional':const(Rest)))),'/Functional':eval('/Functional':applyBinOp('/Functional':const(0),'/Functional':minus,'/Functional':const(Value)),'/bootstrap':number,MinusValue))),'/Functional':otherwise('/Functional':const([]))))).
'/bootstrap':defAtom(minus::'/Functional':binOp('/bootstrap':list(addition))).
'/bootstrap':projection(minus::'/Functional':binOp('/bootstrap':list(addition)),'/bootstrap':symbol(8854)).
'/Functional':def('/Functional':applyBinOp(A,minus,B),'/bootstrap':list(addition),'/Functional':applyBinOp(A,plus,annotation:parentheses(minus(B)))).

'/bootstrap':signature(axiom(Axiom)::'/bootstrap':statement,[Axiom::axiom]).
'/bootstrap':projection(axiom(Axiom)::'/bootstrap':statement,'/bootstrap':horiz(['/bootstrap':label(!axiom),'/bootstrap':vis(Axiom::axiom)])).
axiom(example:someFact(1,2)).
'/bootstrap':signature(isAxiom(Axiom)::'/bootstrap':pred,[Axiom::axiom]).
axiom(Axiom)~>isAxiom(Axiom):-builtin:true.
'/bootstrap':signature(axiomForHash(Hash,Axiom)::'/bootstrap':pred,[Hash::'/bootstrap':string,Axiom::axiom]).
axiomForHash(Hash,Axiom):-'/containers':callInContainer(Hash,isAxiom(Axiom1)),'/containers':uncontainerize(Axiom1::axiom,Axiom2::axiom,Hash),containerizeLocalGoals(Axiom2,Axiom,Hash).
'/bootstrap':signature(containerizeLocalGoals(AxiomIn,AxiomOut,Hash)::'/bootstrap':pred,[AxiomIn::axiom,AxiomOut::axiom,Hash::'/bootstrap':string]).
'/util':behavior(containerizeLocalGoals(AxiomIn,AxiomOut,Hash)::'/bootstrap':pred,!'should pass a fact as-is', (containerizeLocalGoals(example:someFact(1,2),Axiom2,!foo),'/util':assertEqual(Axiom2,example:someFact(1,2),axiom))).
'/util':behavior(containerizeLocalGoals(AxiomIn,AxiomOut,Hash)::'/bootstrap':pred,!'should restrict guards to containers', (containerizeLocalGoals(rule(example:someFact(X,Y),'/Functional':gt('/Functional':const(X),'/Functional':const(Y),'/bootstrap':number),example:someFact(Y,X)),Axiom2,!foo),'/util':assertEqual(Axiom2,rule(example:someFact(X,Y),'/containers':callInContainer(!foo,'/Functional':gt('/Functional':const(X),'/Functional':const(Y),'/bootstrap':number)),example:someFact(Y,X)),axiom))).
'/util':behavior(containerizeLocalGoals(AxiomIn,AxiomOut,Hash)::'/bootstrap':pred,!'should restrict local goals in clause body to containers', (containerizeLocalGoals(clause(example:somePred(X,Y),conj(example:somePred([Y|X],3),local('/bootstrap':listMember(Y,'/bootstrap':number,X)))),Axiom2,!foo),'/util':assertEqual(Axiom2,clause(example:somePred(X,Y),conj(example:somePred([Y|X],3),local('/containers':callInContainer(!foo,'/bootstrap':listMember(Y,'/bootstrap':number,X))))),axiom))).
annotation:shrink((containerizeLocalGoals(AxiomIn,AxiomOut,Hash):-builtin:if(AxiomIn::axiom=rule(Fact,Guard,Axiom)::axiom,AxiomOut::axiom=rule(Fact,'/containers':callInContainer(Hash,Guard),Axiom)::axiom,builtin:if(AxiomIn::axiom=clause(Head,Body)::axiom, (containerizeBody(Body,BodyPrime,Hash),AxiomOut::axiom=clause(Head,BodyPrime)::axiom),AxiomOut::axiom=AxiomIn::axiom)))).
'/bootstrap':signature(containerizeBody(GoalIn,GoalOut,Hash)::'/bootstrap':pred,[GoalIn::pred,GoalOut::pred,Hash::'/bootstrap':string]).
'/util':behavior(containerizeBody(GoalIn,GoalOut,Hash)::'/bootstrap':pred,!'should leave "normal" goals untouched', (containerizeBody(example:somePred([1],X),Goal,!foo),'/util':assertEqual(Goal,example:somePred([1],X),pred))).
'/util':behavior(containerizeBody(GoalIn,GoalOut,Hash)::'/bootstrap':pred,!'should restrict a local goal to a container', (containerizeBody(local('/bootstrap':listMember(X,T,L)),Goal,!foo),'/util':assertEqual(Goal,local('/containers':callInContainer(!foo,'/bootstrap':listMember(X,T,L))),pred))).
'/util':behavior(containerizeBody(GoalIn,GoalOut,Hash)::'/bootstrap':pred,!'should handle both elements in a conjunction', (containerizeBody(conj(local('/bootstrap':listMember(X,T,L)),local('/bootstrap':listMember(Y,T,L))),Goal,!foo),'/util':assertEqual(Goal,conj(local('/containers':callInContainer(!foo,'/bootstrap':listMember(X,T,L))),local('/containers':callInContainer(!foo,'/bootstrap':listMember(Y,T,L)))),pred))).
'/util':behavior(containerizeBody(GoalIn,GoalOut,Hash)::'/bootstrap':pred,!'should handle negation', (containerizeBody(not(local('/bootstrap':listMember(X,T,L))),Goal,!foo),'/util':assertEqual(Goal,not(local('/containers':callInContainer(!foo,'/bootstrap':listMember(X,T,L)))),pred))).
annotation:shrink((containerizeBody(GoalIn,GoalOut,Hash):-builtin:if(GoalIn::pred=local(LocalGoal)::pred,GoalOut::pred=local('/containers':callInContainer(Hash,LocalGoal))::pred,builtin:if(GoalIn::pred=annotation:parentheses(conj(G1,G2))::pred, (containerizeBody(G1,G1Prime,Hash),containerizeBody(G2,G2Prime,Hash),GoalOut::pred=annotation:parentheses(conj(G1Prime,G2Prime))::pred),builtin:if(GoalIn::pred=not(G)::pred, (containerizeBody(G,GPrime,Hash),GoalOut::pred=not(GPrime)::pred),GoalOut::pred=GoalIn::pred))))).

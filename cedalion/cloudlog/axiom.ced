'/bootstrap':signature(axiom(Axiom)::'/bootstrap':statement,[Axiom::axiom]).
'/bootstrap':projection(axiom(Axiom)::'/bootstrap':statement,'/bootstrap':horiz(['/bootstrap':label(!axiom),'/bootstrap':vis(Axiom::axiom)])).
axiom(example:someFact(1,2)).
'/bootstrap':signature(isAxiom(Axiom)::'/bootstrap':pred,[Axiom::axiom]).
axiom(Axiom)~>isAxiom(Axiom):-builtin:true.
'/bootstrap':signature(axiomForHash(Hash,Axiom)::'/bootstrap':pred,[Hash::'/bootstrap':string,Axiom::axiom]).
axiomForHash(Hash,Axiom):-'/containers':callInContainer(Hash,isAxiom(Axiom1)),containerizeLocalGoals(Axiom1,Axiom,Hash).
'/bootstrap':signature(containerizeLocalGoals(AxiomIn,AxiomOut,Hash)::'/bootstrap':pred,[AxiomIn::axiom,AxiomOut::axiom,Hash::'/bootstrap':string]).
'/util':behavior(containerizeLocalGoals(AxiomIn,AxiomOut,Hash)::'/bootstrap':pred,!'should pass a fact as-is', (containerizeLocalGoals(example:someFact(1,2),Axiom2,!'cl1foo'),'/util':assertEqual(Axiom2,example:someFact(1,2),axiom))).
'/util':behavior(containerizeLocalGoals(AxiomIn,AxiomOut,Hash)::'/bootstrap':pred,!'should restrict guards to containers', (containerizeLocalGoals(rule(example:someFact(X,Y),'/Functional':gt('/Functional':const(X),'/Functional':const(Y),'/bootstrap':number),example:someFact(Y,X)),Axiom2,!'cl1foo'),'/util':assertEqual(Axiom2,rule(example:someFact(X,Y),'/containers':callInContainer(!'cl1foo','/Functional':gt('/Functional':const(X),'/Functional':const(Y),'/bootstrap':number)),example:someFact(Y,X)),axiom))).
'/util':behavior(containerizeLocalGoals(AxiomIn,AxiomOut,Hash)::'/bootstrap':pred,!'should restrict local goals in clause body to containers', (containerizeLocalGoals(clause(example:somePred(X,Y),conj(example:somePred([Y|X],3),local('/bootstrap':listMember(Y,'/bootstrap':number,X)))),Axiom2,!'cl1foo'),'/util':assertEqual(Axiom2,clause(example:somePred(X,Y),conj(example:somePred([Y|X],3),local('/containers':callInContainer(!'cl1foo','/bootstrap':listMember(Y,'/bootstrap':number,X))))),axiom))).
'/util':behavior(containerizeLocalGoals(AxiomIn,AxiomOut,Hash)::'/bootstrap':pred,!'should wrap any goal within the axiom', (containerizeLocalGoals(rule(example:someFact(1,X),rule(example:someFact(X,Y),Guard,Foo)),Axiom2,!'cl1foo'),'/util':assertEqual(Axiom2,rule(example:someFact(1,X),rule(example:someFact(X,Y),'/containers':callInContainer(!'cl1foo',Guard),Foo)),axiom))).
'/util':behavior(containerizeLocalGoals(AxiomIn,AxiomOut,Hash)::'/bootstrap':pred,!'should consider the contained program when infering types', (containerizeLocalGoals(example:foo(X,Y),Axiom2,!'cl1foo'),'/util':assertEqual(Axiom2,example:foo(X,'/containers':callInContainer(!'cl1foo',Y)),axiom))).
annotation:shrink((containerizeLocalGoals(AxiomIn,AxiomOut,Hash):-containerizeTermGoals(AxiomIn::axiom,AxiomOut::axiom,Hash))).
'/bootstrap':signature(containerizeTermGoals(TTermIn,TTermOut,Hash)::'/bootstrap':pred,[TTermIn::'/bootstrap':typedTerm,TTermOut::'/bootstrap':typedTerm,Hash::'/bootstrap':string]).
annotation:shrink((containerizeTermGoals(TTermIn,TTermOut,Hash):-builtin:if(TTermIn=Goal::'/bootstrap':pred,TTermOut='/containers':callInContainer(Hash,Goal)::'/bootstrap':pred,builtin:if(builtin:compound(TTermIn), ('/bootstrap':safeParseTerm(TTermIn,Name,TArgs),'/containers':callInContainer(Hash,'/bootstrap':safeParseTerm(TTermIn,Name,TArgs)),containerizeTermsGoals(TArgs,TArgsOut,Hash),builtin:parseTerm(TTermOut,Name,TArgsOut)),TTermOut=TTermIn)))).
'/bootstrap':signature(containerizeTermsGoals(TArgs,TArgsOut,Hash)::'/bootstrap':pred,[TArgs::'/bootstrap':list('/bootstrap':typedTerm),TArgsOut::'/bootstrap':list('/bootstrap':typedTerm),Hash::'/bootstrap':string]).
annotation:shrink((containerizeTermsGoals([TTerm|TArgs],[TTermOut|TArgsOut],Hash):-containerizeTermGoals(TTerm,TTermOut,Hash),containerizeTermsGoals(TArgs,TArgsOut,Hash))).
containerizeTermsGoals([],[],_):-builtin:true.
'/bootstrap':signature(rule(Fact,Axiom)::axiom,[Fact::axiom,Axiom::axiom]).
'/bootstrap':projection(rule(Fact,Axiom)::axiom,'/bootstrap':horiz(['/bootstrap':vis(Fact::axiom),'/bootstrap':symbol(8594),'/bootstrap':vis(Axiom::axiom)])).
'/bootstrap':alias(rule(Fact,Axiom)::axiom,! (->)).
genericRule(rule(rule(Fact,Axiom),builtin:true,rule(Fact,builtin:true,Axiom))).
'cl1foo@/containers':exists:-builtin:true.
annotation:comment(annotation:shrink(('cl1foo@/bootstrap':safeParseTerm(TTerm,Name,TArgs):-builtin:if(Name::'/bootstrap':string=!'example#foo'::'/bootstrap':string,TArgs::'/bootstrap':list('/bootstrap':typedTerm)=[_::'/bootstrap':number,_::'/bootstrap':pred]::'/bootstrap':list('/bootstrap':typedTerm),builtin:true))),!'Mock to simulate a container').

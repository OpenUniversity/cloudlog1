'/bootstrap':signature(axiomFamily(Axiom,Family,Key)::'/bootstrap':pred,[Axiom::axiom,Family::'/bootstrap':string,Key::'/bootstrap':typedTerm]).
'/bootstrap':projection(axiomFamily(Axiom,Family,Key)::'/bootstrap':pred,'/bootstrap':horiz(['/bootstrap':label(!axiom),'/bootstrap':vis(Axiom::axiom),'/bootstrap':label(!'is classified as'),'/bootstrap':vis(Family::'/bootstrap':string),'/bootstrap':label(!'and is indexed by'),'/bootstrap':vis(Key::'/bootstrap':typedTerm)])).
'/bootstrap':signature(example:someFact(X,Y)::axiom,[X::'/bootstrap':number,Y::'/bootstrap':number]).
'/util':behavior(axiomFamily(Axiom,Family,Key)::'/bootstrap':pred,!'should default to "facts"', (axiomFamily(example:someFact(1,2),Family,Key),'/util':assertEqual(Family,!facts,'/bootstrap':string))).
'/bootstrap':signature(illegalAxiom(Axiom)::'/bootstrap':exception,[Axiom::axiom]).
annotation:shrink((axiomFamily(Axiom,Family,Key):-builtin:if(builtin:var(Axiom::axiom),builtin:throw(illegalAxiom(Axiom)),builtin:if(Axiom::axiom=rule(Fact,_,_)::axiom, (axiomFamily(Fact,_,Key),Family::'/bootstrap':string=!rules::'/bootstrap':string),builtin:if(Axiom::axiom=clause(Head,Body)::axiom, (builtin:parseTerm(Head::pred,_,[Key|_]),Family::'/bootstrap':string=!clauses::'/bootstrap':string), (builtin:parseTerm(Axiom::axiom,_,[Key|_]),Family::'/bootstrap':string=!facts::'/bootstrap':string)))))).
'/util':behavior(axiomFamily(Axiom,Family,Key)::'/bootstrap':pred,!'should provide the first argument of a fact as key', (axiomFamily(example:someFact(1,2),Family,KeyPrime::'/bootstrap':number),'/util':assertEqual(KeyPrime,1,'/bootstrap':number))).
'/bootstrap':signature(rule(Fact,Goal,Axiom)::axiom,[Fact::axiom,Goal::'/bootstrap':pred,Axiom::axiom]).
'/bootstrap':projection(rule(Fact,Goal,Axiom)::axiom,'/bootstrap':horiz(['/bootstrap':vis(Fact::axiom),'/bootstrap':brackets('/bootstrap':vis(Goal::'/bootstrap':pred),123,125),'/bootstrap':symbol(8594),'/bootstrap':vis(Axiom::axiom)])).
'/bootstrap':alias(rule(Fact,Goal,Axiom)::axiom,! (->)).
'/util':behavior(axiomFamily(Axiom,Family,Key)::'/bootstrap':pred,!'should identify rules', (axiomFamily(rule(example:someFact(2,X),Goal,Axiom),Family,Key),'/util':assertEqual(Family,!rules,'/bootstrap':string))).
'/util':behavior(axiomFamily(Axiom,Family,Key)::'/bootstrap':pred,!'should take the first argument of the fact triggerring the rule as key', (axiomFamily(rule(example:someFact(2,X),builtin:true,example:someFact(X,4)),Family,KeyPrime::'/bootstrap':number),'/util':assertEqual(KeyPrime,2,'/bootstrap':number))).
'/util':behavior(axiomFamily(Axiom,Family,Key)::'/bootstrap':pred,!'should identify clauses', (axiomFamily(clause(example:somePred([1,2],X),true),Family,KeyPrime::'/bootstrap':number),'/util':assertEqual(Family,!clauses,'/bootstrap':string))).
'/util':behavior(axiomFamily(Axiom,Family,Key)::'/bootstrap':pred,!'should take the first argument of the head as key for a clause', (axiomFamily(clause(example:somePred([1,2],X),true),Family,KeyPrime::'/bootstrap':list('/bootstrap':number)),'/util':assertEqual(KeyPrime,[1,2],'/bootstrap':list('/bootstrap':number)))).

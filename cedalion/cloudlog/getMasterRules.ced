'/bootstrap':signature(getMasterAxioms(Table,Family,Version,MasterRules)::'/impred':impred,[Table::'/bootstrap':string,Family::'/bootstrap':string,Version::'/bootstrap':number,MasterRules::'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))]).
'/util':behavior(getMasterAxioms(Table,Family,Version,MasterRules)::'/impred':impred,!'should retrieve an empty list if the master version is 0', ('/impred':simulate(getMasterAxioms(!foo,!rules,0,Empty),[],'/impred':true),'/util':assertEqual(Empty,[],'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))))).
'/util':behavior(getMasterAxioms(Table,Family,Version,MasterRules)::'/impred':impred,!'should fetch the rules from local storage', ('/impred':simulate(getMasterAxioms(!foo,!rules,7,Rules),['/impred':task('/impred':localGet(!'foo:7:rules'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)]),'/impred':localStoreVal)],'/impred':true),'/util':assertEqual(Rules,['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)],'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))))).
'/util':behavior(getMasterAxioms(Table,Family,Version,MasterRules)::'/impred':impred,!'should go to the database if rules are not in local storage', ('/impred':simulate(getMasterAxioms(!foo,!rules,9,Rules),['/impred':task('/impred':localGet(!'foo:9:rules'),_,'/impred':localStoreVal),'/impred':task('/nodalion':trans(!'%masters',!'foo:9',['/nodalion':getAllCounters(!rules),'/nodalion':getAllCounters(!master)]),['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1),'/nodalion':counterValue(!master,exists,1)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,_))),'/impred':task('/impred':localSet(!'foo:9:rules',masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)])),_,'/impred':localStoreVal)],'/impred':true),'/util':assertEqual(Rules,['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)],'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))))).
'/util':behavior(getMasterAxioms(Table,Family,Version,MasterRules)::'/impred':impred,!'should retrieve facts if was so asked', ('/impred':simulate(getMasterAxioms(!foo,!facts,9,Facts),['/impred':task('/impred':localGet(!'foo:9:facts'),_,'/impred':localStoreVal),'/impred':task('/nodalion':trans(!'%masters',!'foo:9',['/nodalion':getAllCounters(!facts),'/nodalion':getAllCounters(!master)]),['/nodalion':counterValue(!facts,example:someFact(1,2),1),'/nodalion':counterValue(!master,exists,1)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,_))),'/impred':task('/impred':localSet(!'foo:9:facts',masterRules(['/nodalion':counterValue(!facts,example:someFact(1,2),1)])),_,'/impred':localStoreVal)],_),'/util':assertEqual(Facts,['/nodalion':counterValue(!facts,example:someFact(1,2),1)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,_))))).
'/util':behavior(getMasterAxioms(Table,Family,Version,MasterRules)::'/impred':impred,!'should recheck if the master:exists counter is not present', ('/impred':simulate(getMasterAxioms(!foo,!rules,9,Rules),['/impred':task('/impred':localGet(!'foo:9:rules'),_,'/impred':localStoreVal),'/impred':task('/nodalion':trans(!'%masters',!'foo:9',['/nodalion':getAllCounters(!rules),'/nodalion':getAllCounters(!master)]),[],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,_))),'/impred':task('/impred':localGet(!'foo:9:rules'),_,'/impred':localStoreVal),'/impred':task('/nodalion':trans(!'%masters',!'foo:9',['/nodalion':getAllCounters(!rules),'/nodalion':getAllCounters(!master)]),['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1),'/nodalion':counterValue(!master,exists,1)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,_))),'/impred':task('/impred':localSet(!'foo:9:rules',masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)])),_,'/impred':localStoreVal)],'/impred':true),'/util':assertEqual(Rules,['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)],'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))))).
annotation:shrink('/impred':clause(getMasterAxioms(Table,Family,Version,Rules),'/impred':if('/impred':pred(builtin:equals(Version::'/bootstrap':number,0::'/bootstrap':number)),'/impred':pred(Rules::'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,T2))=[]::'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(Table),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (:)),'/Functional':concat,'/Functional':applyBinOp('/Functional':'num2str'('/Functional':const(Version)),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (:)),'/Functional':concat,'/Functional':const(Family))))),'/bootstrap':string,Key)),'/impred':conj('/impred':task('/impred':localGet(Key),masterRules(Rules),'/impred':localStoreVal),'/impred':if('/impred':pred(builtin:var(Rules::'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,T2)))),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(Table),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (:)),'/Functional':concat,'/Functional':'num2str'('/Functional':const(Version)))),'/bootstrap':string,RowKey)),'/impred':conj('/impred':task('/nodalion':trans(!'%masters',RowKey,['/nodalion':getAllCounters(Family),'/nodalion':getAllCounters(!master)]),RulesPrime,'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,T2))),'/impred':if('/impred':pred(RulesPrime::'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,T2))=[]::'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,T2))),getMasterAxioms(Table,Family,Version,Rules),'/impred':conj('/impred':pred(builtin:findall('/nodalion':counterValue(Family,Counter,Value),'/nodalion':databaseValue('/bootstrap':string,axiom,T2),'/bootstrap':listMember('/nodalion':counterValue(Family,Counter,Value),'/nodalion':databaseValue('/bootstrap':string,axiom,T2),RulesPrime),Rules)),'/impred':task('/impred':localSet(Key,masterRules(Rules)),_,'/impred':localStoreVal))))),'/impred':true)))))).

'/bootstrap':signature(getMasterRules(Table,Version,MasterRules)::'/impred':impred,[Table::'/bootstrap':string,Version::'/bootstrap':number,MasterRules::'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))]).
'/util':behavior(getMasterRules(Table,Version,MasterRules)::'/impred':impred,!'should retrieve an empty list if the master version is 0', ('/impred':simulate(getMasterRules(!foo,0,Empty),[],'/impred':true),'/util':assertEqual(Empty,[],'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))))).
'/util':behavior(getMasterRules(Table,Version,MasterRules)::'/impred':impred,!'should fetch the rules from local storage', ('/impred':simulate(getMasterRules(!foo,7,Rules),['/impred':task('/impred':localGet(!'foo:7'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)]),'/impred':localStoreVal)],'/impred':true),'/util':assertEqual(Rules,['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)],'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))))).
'/util':behavior(getMasterRules(Table,Version,MasterRules)::'/impred':impred,!'should go to the database if rules are not in local storage', ('/impred':simulate(getMasterRules(!foo,9,Rules),['/impred':task('/impred':localGet(!'foo:9'),_,'/impred':localStoreVal),'/impred':task('/nodalion':trans(!'%masters',!'foo:9',['/nodalion':getAllCounters(!rules)]),['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,_))),'/impred':task('/impred':localSet(!'foo:9',masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)])),_,'/impred':localStoreVal)],'/impred':true),'/util':assertEqual(Rules,['/nodalion':counterValue(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)],'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))))).
annotation:shrink('/impred':clause(getMasterRules(Table,Version,Rules),'/impred':if('/impred':pred(builtin:equals(Version::'/bootstrap':number,0::'/bootstrap':number)),'/impred':pred(Rules::'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,T2))=[]::'/bootstrap':list('/nodalion':databaseValue(_,axiom,_))),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(Table),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (:)),'/Functional':concat,'/Functional':'num2str'('/Functional':const(Version)))),'/bootstrap':string,Key)),'/impred':conj('/impred':task('/impred':localGet(Key),masterRules(Rules),'/impred':localStoreVal),'/impred':if('/impred':pred(builtin:var(Rules::'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,T2)))),'/impred':conj('/impred':task('/nodalion':trans(!'%masters',Key,['/nodalion':getAllCounters(!rules)]),Rules,'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,T2))),'/impred':task('/impred':localSet(Key,masterRules(Rules)),_,'/impred':localStoreVal)),'/impred':true)))))).

'/bootstrap':defAtom(pred::'/bootstrap':type).
'/bootstrap':signature(logicQuery(Q,Session,V)::'/impred':impred,[Q::pred,Session::'/bootstrap':string,V::'/bootstrap':number]).
'/bootstrap':signature(example:somePred(A,B)::pred,[A::'/bootstrap':list('/bootstrap':number),B::'/bootstrap':number]).
'/bootstrap':signature(firstArgumentNotGround(Arg)::'/bootstrap':exception,[Arg::'/bootstrap':typedTerm]).
'/deploy':behavior(logicQuery(Q,Session,V)::'/impred':impred,!'should throw an exception if Q\'s first argument is not ground','/impred':solve(logicQuery(example:somePred([X],Y),!'session1',_),_,_,'/impred':throws(firstArgumentNotGround([X]::'/bootstrap':list('/bootstrap':number))))).
'/bootstrap':defAtom(axiom::'/bootstrap':type).
'/bootstrap':signature(clause(Q,Body)::axiom,[Q::pred,Body::pred]).
'/bootstrap':projection(clause(Q,Body)::axiom,'/bootstrap':horiz(['/bootstrap':vis(Q::pred),'/bootstrap':label(! (:-)),'/bootstrap':vis(Body::pred)])).
'/bootstrap':signature(rowForTerm(TTerm,Row)::'/bootstrap':pred,[TTerm::'/bootstrap':typedTerm,Row::'/bootstrap':string]).
'/bootstrap':projection(rowForTerm(TTerm,Row)::'/bootstrap':pred,'/bootstrap':horiz(['/bootstrap':label(!term),'/bootstrap':vis(TTerm::'/bootstrap':typedTerm),'/bootstrap':label(!'is stored at row'),'/bootstrap':vis(Row::'/bootstrap':string)])).
rowForTerm(TTerm,Row):-builtin:parseTerm(TTerm,Func,[Arg|Args]),builtin:if(builtin:ground(Arg),'/Functional':eval('/Functional':where('/Functional':applyBinOp('/Functional':const(Func),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (:)),'/Functional':concat,'/Functional':const(ArgStr))),builtin:rawTermToString(Arg,ArgStr)),'/bootstrap':string,Row),builtin:throw(firstArgumentNotGround(Arg))).
'/bootstrap':signature(axiomInRow(Row,Axiom,ValueElems)::'/impred':impred,[Row::'/bootstrap':string,Axiom::axiom,ValueElems::'/bootstrap':list(counterValue)]).
'/bootstrap':projection(axiomInRow(Row,Axiom,ValueElems)::'/impred':impred,'/bootstrap':horiz(['/bootstrap':label(!row),'/bootstrap':vis(Row::'/bootstrap':string),'/bootstrap':label(!'contains axiom'),'/bootstrap':vis(Axiom::axiom),'/bootstrap':label(!'with value'),'/bootstrap':vis(ValueElems::'/bootstrap':list(counterValue))])).
'/impred':clause(axiomInRow(Row,Axiom,ValueElems),'/impred':conj('/impred':task('/nodalion':trans(!axioms,Row,['/nodalion':getAll(!clauses)]),Columns,'/bootstrap':list('/nodalion':databaseValue)),'/impred':pred((parseRowResult(Columns,Cells,_),'/bootstrap':listMember(parsedCell(StrTerm,ValueElems),parsedCell,Cells),builtin:rawTermToString(Axiom::axiom,StrTerm))))).
annotation:shrink('/impred':clause(logicQuery(Q,Session,V),'/impred':if('/impred':pred(Q::pred=true::pred),'/impred':pred(V::'/bootstrap':number=1::'/bootstrap':number),'/impred':if('/impred':pred(Q::pred=local(QPrime)::pred),'/impred':pred((V::'/bootstrap':number=1::'/bootstrap':number,executeLocal(QPrime))),'/impred':if('/impred':pred(Q::pred=annotation:parentheses(conj(G1,G2))::pred),'/impred':conj(logicQuery(G1,Session,V1),'/impred':conj(logicQuery(G2,Session,V2),'/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(V1),'/Functional':times,'/Functional':const(V2)),'/bootstrap':number,V)))),'/impred':conj('/impred':pred(rowForTerm(Q::pred,Row)),'/impred':conj(axiomInRow(Row,clause(Q,Body),ValueElems),'/impred':conj(logicQuery(Body,Session,V1),'/impred':eval('/impred':binop(counterValue(ValueElems,Session),'/Functional':times,'/impred':pureExpr('/Functional':const(V1))),'/bootstrap':number,V))))))))).
'/bootstrap':defAtom(true::pred).
'/bootstrap':projection(true::pred,'/bootstrap':symbol(8868)).
'/deploy':behavior(logicQuery(Q,Session,V)::'/impred':impred,!'should succeed with a value if that value is stored in the database', (builtin:rawTermToString(clause(example:somePred([1,2],3),true)::axiom,Axiom),builtin:rawTermToString(baseVal(1)::counterValue,BaseVal),'/impred':simulate(logicQuery(example:somePred([1,2],X),!'session1',V),['/impred':task('/nodalion':trans(!axioms,!'example#somePred:\'.\'(1,\'.\'(2,[]))',['/nodalion':getAll(!clauses)]),['/nodalion':value(!clauses,Axiom,[BaseVal])],'/bootstrap':list('/nodalion':databaseValue))],'/impred':true),builtin:equals(X::'/bootstrap':number,3::'/bootstrap':number),builtin:equals(V::'/bootstrap':number,1::'/bootstrap':number))).
'/deploy':behavior(true::pred,!'should return 1 without going to the database', ('/impred':simulate(logicQuery(true,!'session1',V),[],'/impred':true),builtin:equals(V::'/bootstrap':number,1::'/bootstrap':number))).
'/bootstrap':signature(local(Pred)::pred,[Pred::'/bootstrap':pred]).
'/bootstrap':projection(local(Pred)::pred,'/bootstrap':horiz(['/bootstrap':brackets('/bootstrap':vis(Pred::'/bootstrap':pred),8920,8921)])).
'/bootstrap':adapter(Pred::'/bootstrap':pred,local(Pred)::pred).
'/deploy':behavior(local(Pred)::pred,!'should evaluate the predicate without going to the database', ('/impred':simulate(logicQuery(local(builtin:succ(2,X)),!'session1',V),[],'/impred':true),builtin:equals(V::'/bootstrap':number,1::'/bootstrap':number),builtin:equals(X::'/bootstrap':number,3::'/bootstrap':number))).
'/bootstrap':signature(localPredicateTimedOut(Goal)::'/bootstrap':exception,[Goal::'/bootstrap':pred]).
'/deploy':behavior(local(Pred)::pred,!'should protect against non termination','/impred':solve(logicQuery(local('/bootstrap':aPredicateThatDoesNotTerminate),!'session1',V),_,_,'/impred':throws(localPredicateTimedOut('/bootstrap':aPredicateThatDoesNotTerminate)))).
'/bootstrap':defAtom(true::pred).
'/deploy':behavior(logicQuery(Q,Session,V)::'/impred':impred,!'should query the body of a clause', (builtin:rawTermToString(clause(example:somePred([1,2],X),example:somePred([3,4],X))::axiom,Axiom1),builtin:rawTermToString(clause(example:somePred([3,4],6),true)::axiom,Axiom2),builtin:rawTermToString(baseVal(3)::counterValue,BaseVal1),builtin:rawTermToString(baseVal(5)::counterValue,BaseVal2),'/impred':simulate(logicQuery(example:somePred([1,2],X),!'session1',V),['/impred':task('/nodalion':trans(!axioms,!'example#somePred:\'.\'(1,\'.\'(2,[]))',['/nodalion':getAll(!clauses)]),['/nodalion':value(!clauses,Axiom1,[BaseVal1])],'/bootstrap':list('/nodalion':databaseValue)),'/impred':task('/nodalion':trans(!axioms,!'example#somePred:\'.\'(3,\'.\'(4,[]))',['/nodalion':getAll(!clauses)]),['/nodalion':value(!clauses,Axiom2,[BaseVal2])],'/bootstrap':list('/nodalion':databaseValue))],'/impred':true),builtin:equals(X::'/bootstrap':number,6::'/bootstrap':number),builtin:equals(V::'/bootstrap':number,15::'/bootstrap':number))).
'/bootstrap':signature(conj(G1,G2)::pred,[G1::pred,G2::pred]).
'/bootstrap':projection(conj(G1,G2)::pred,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':vis(G1::pred),'/bootstrap':label(! (,))]),'/bootstrap':horiz(['/bootstrap':vis(G2::pred)])])).
'/bootstrap':alias(conj(G1,G2)::pred,! (,)).
'/deploy':behavior(conj(G1,G2)::pred,!'should succeed when both G1 and G2 succeed', (builtin:rawTermToString(clause(example:somePred([1],2),true)::axiom,Axiom),builtin:rawTermToString(baseVal(7)::counterValue,BaseVal),'/impred':simulate(logicQuery(annotation:parentheses(conj(example:somePred([1],X),local(builtin:succ(X,Y)))),!'session1',V),['/impred':task('/nodalion':trans(!axioms,!'example#somePred:\'.\'(1,[])',['/nodalion':getAll(!clauses)]),['/nodalion':value(!clauses,Axiom,[BaseVal])],'/bootstrap':list('/nodalion':databaseValue))],'/impred':true),builtin:equals(Y::'/bootstrap':number,3::'/bootstrap':number),builtin:equals(V::'/bootstrap':number,7::'/bootstrap':number))).

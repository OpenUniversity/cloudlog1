'/bootstrap':defAtom(pred::'/bootstrap':type).
'/bootstrap':signature(logicQuery(Q,Session,V)::'/impred':impred,[Q::pred,Session::'/bootstrap':string,V::'/bootstrap':number]).
'/bootstrap':signature(example:somePred(A,B)::pred,[A::'/bootstrap':list('/bootstrap':number),B::'/bootstrap':number]).
'/bootstrap':signature(firstArgumentNotGround(Arg)::'/bootstrap':exception,[Arg::'/bootstrap':typedTerm]).
'/deploy':behavior(logicQuery(Q,Session,V)::'/impred':impred,!'should throw an exception if Q\'s first argument is not ground','/impred':solve(logicQuery(example:somePred([X],Y),!'session1',_),_,_,'/impred':throws(firstArgumentNotGround([X]::'/bootstrap':list('/bootstrap':number))))).
'/bootstrap':defAtom(axiom::'/bootstrap':type).
'/bootstrap':signature(clause(Q,Body)::axiom,[Q::pred,Body::pred]).
'/bootstrap':projection(clause(Q,Body)::axiom,'/bootstrap':horiz(['/bootstrap':vis(Q::pred),'/bootstrap':label(! (:-)),'/bootstrap':vis(Body::pred)])).
'/impred':clause(logicQuery(Q,Session,V),'/impred':conj('/impred':pred(builtin:parseTerm(Q::pred,Func,[Arg|Args])),'/impred':if('/impred':pred(builtin:ground(Arg)),'/impred':conj('/impred':pred('/Functional':eval('/Functional':where('/Functional':applyBinOp('/Functional':const(Func),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (:)),'/Functional':concat,'/Functional':const(ArgStr))),builtin:rawTermToString(Arg,ArgStr)),'/bootstrap':string,Row)),'/impred':conj('/impred':task('/nodalion':trans(!axioms,Row,['/nodalion':getAll]),Columns,'/bootstrap':list('/nodalion':databaseValue)),'/impred':conj('/impred':pred(parseRowResult(Columns,Cells,_)),'/impred':conj('/impred':pred(('/bootstrap':listMember(parsedCell(StrTerm,ValueElems),parsedCell,Cells),builtin:rawTermToString(clause(Q,Body)::axiom,StrTerm))),'/impred':eval(counterValue(ValueElems,Session),'/bootstrap':number,V))))),'/impred':pred(builtin:throw(firstArgumentNotGround(Arg)))))).
'/deploy':behavior(logicQuery(Q,Session,V)::'/impred':impred,!'should succeed with a value if that value is stored in the database', (builtin:rawTermToString(clause(example:somePred([1,2],3),true)::axiom,Axiom),builtin:rawTermToString(baseVal(1)::counterValue,BaseVal),'/impred':simulate(logicQuery(example:somePred([1,2],X),!'session1',V),['/impred':task('/nodalion':trans(!axioms,!'example#somePred:\'.\'(1,\'.\'(2,[]))',['/nodalion':getAll]),['/nodalion':value(Axiom,[BaseVal])],'/bootstrap':list('/nodalion':databaseValue))],'/impred':true),builtin:equals(X::'/bootstrap':number,3::'/bootstrap':number),builtin:equals(V::'/bootstrap':number,1::'/bootstrap':number))).
'/bootstrap':defAtom(true::pred).
'/bootstrap':sandbox('/impred':simulate(logicQuery(example:somePred([1,2],X),!'session1',1),['/impred':task('/nodalion':trans(!axioms,!'example#somePred:\'.\'(1,\'.\'(2,[]))',['/nodalion':getAll]),['/nodalion':value(!'\'example#somePred\'(\'.\'(1,\'.\'(2,[])),3)',[])],'/bootstrap':list('/nodalion':databaseValue))],'/impred':true)::'/bootstrap':pred).

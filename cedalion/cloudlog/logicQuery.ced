'/bootstrap':defAtom(pred::'/bootstrap':type).
'/bootstrap':signature(logicQuery(Q,V)::'/impred':impred,[Q::pred,V::'/bootstrap':number]).
'/bootstrap':tip(logicQuery(Q,Session,V)::'/impred':impred,Path,VNs,cpi:edit(Path,logicQuery(Q,V)::'/impred':impred,VNs)).
'/bootstrap':signature(example:somePred(A,B)::pred,[A::'/bootstrap':list('/bootstrap':number),B::'/bootstrap':number]).
'/util':behavior(logicQuery(Q,V)::'/impred':impred,!'should throw an exception if Q\'s first argument is not ground','/impred':solve(logicQuery(example:somePred([X],X),_),_,_,'/impred':throws(firstArgumentNotGround([X]::'/bootstrap':list('/bootstrap':number))))).
'/bootstrap':defAtom(axiom::'/bootstrap':type).
'/bootstrap':signature(clause(Q,Body)::axiom,[Q::pred,Body::pred]).
'/bootstrap':projection(clause(Q,Body)::axiom,'/bootstrap':horiz(['/bootstrap':vis(Q::pred),'/bootstrap':label(! (:-)),'/bootstrap':vis(Body::pred)])).
annotation:shrink('/impred':clause(logicQuery(Q,V),'/impred':if('/impred':pred(Q::pred=true::pred),'/impred':pred(V::'/bootstrap':number=1::'/bootstrap':number),'/impred':if('/impred':pred(Q::pred=local(QPrime)::pred),'/impred':pred((V::'/bootstrap':number=1::'/bootstrap':number,executeLocal(QPrime))),'/impred':if('/impred':pred(Q::pred=annotation:parentheses(conj(G1,G2))::pred),'/impred':conj(logicQuery(G1,V1),'/impred':conj(logicQuery(G2,V2),'/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(V1),'/Functional':times,'/Functional':const(V2)),'/bootstrap':number,V)))),'/impred':if('/impred':pred(Q::pred=not(G)::pred),'/impred':conj('/impred':pred(V::'/bootstrap':number=1::'/bootstrap':number),'/impred':not(logicQuery(G,_))),'/impred':conj(dbFind(clause(Q,Body),V1),'/impred':conj(logicQuery(Body,V2),'/impred':pred(('/Functional':eval('/Functional':applyBinOp('/Functional':const(V1),'/Functional':times,'/Functional':const(V2)),'/bootstrap':number,V),V>0)))))))))).
'/bootstrap':defAtom(true::pred).
'/bootstrap':projection(true::pred,'/bootstrap':symbol(8868)).
'/util':behavior(logicQuery(Q,V)::'/impred':impred,!'should succeed with a value if that value is stored in the database', ('/impred':simulate(logicQuery(example:somePred([1,2],X),V),['/impred':task('/nodalion':trans(!'/cloudlog#clause',[1,2],['/nodalion':getAllCounters(!clauses)]),['/nodalion':counterValue(!clauses,clause(example:somePred([1,2],3),true),1)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':list('/bootstrap':number),axiom,_)))],'/impred':true),'/util':assertEqual(X,3,'/bootstrap':number),'/util':assertEqual(V,1,'/bootstrap':number))).
'/util':behavior(true::pred,!'should return 1 without going to the database', ('/impred':simulate(logicQuery(true,V),[],'/impred':true),'/util':assertEqual(V,1,'/bootstrap':number))).
'/bootstrap':signature(local(Pred)::pred,[Pred::'/bootstrap':pred]).
'/bootstrap':projection(local(Pred)::pred,'/bootstrap':horiz(['/bootstrap':brackets('/bootstrap':vis(Pred::'/bootstrap':pred),8920,8921)])).
'/bootstrap':adapter(Pred::'/bootstrap':pred,local(Pred)::pred).
'/util':behavior(local(Pred)::pred,!'should evaluate the predicate without going to the database', ('/impred':simulate(logicQuery(local(builtin:succ(2,X)),V),[],'/impred':true),'/util':assertEqual(V,1,'/bootstrap':number),'/util':assertEqual(X,3,'/bootstrap':number))).
'/util':behavior(local(Pred)::pred,!'should protect against non termination','/impred':simulate('/impred':not(logicQuery(local('/bootstrap':aPredicateThatDoesNotTerminate),V)),[],'/impred':true)).
'/util':behavior(logicQuery(Q,V)::'/impred':impred,!'should query the body of a clause', ('/impred':simulate(logicQuery(example:somePred([1,2],X),V),['/impred':task('/nodalion':trans(!'/cloudlog#clause',[1,2],['/nodalion':getAllCounters(!clauses)]),['/nodalion':counterValue(!clauses,clause(example:somePred([1,2],X),example:somePred([3],X)),3)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':list('/bootstrap':number),axiom,_))),'/impred':task('/nodalion':trans(!'/cloudlog#clause',[3],['/nodalion':getAllCounters(!clauses)]),['/nodalion':counterValue(!clauses,clause(example:somePred([3],6),true),5)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':list('/bootstrap':number),axiom,_)))],'/impred':true),'/util':assertEqual(X,6,'/bootstrap':number),'/util':assertEqual(V,15,'/bootstrap':number))).
'/bootstrap':signature(conj(G1,G2)::pred,[G1::pred,G2::pred]).
'/bootstrap':projection(conj(G1,G2)::pred,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':vis(G1::pred),'/bootstrap':label(! (,))]),'/bootstrap':horiz(['/bootstrap':vis(G2::pred)])])).
'/bootstrap':alias(conj(G1,G2)::pred,! (,)).
'/util':behavior(conj(G1,G2)::pred,!'should succeed when both G1 and G2 succeed', ('/impred':simulate(logicQuery(conj(example:somePred([1],X),local(builtin:succ(X,Y))),V),['/impred':task('/nodalion':trans(!'/cloudlog#clause',[1],['/nodalion':getAllCounters(!clauses)]),['/nodalion':counterValue(!clauses,clause(example:somePred([1],3),true),7)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':list('/bootstrap':number),axiom,_)))],'/impred':true),'/util':assertEqual(Y,4,'/bootstrap':number),'/util':assertEqual(V,7,'/bootstrap':number))).
'/bootstrap':signature(not(G)::pred,[G::pred]).
'/bootstrap':projection(not(G)::pred,'/bootstrap':horiz(['/bootstrap':symbol(172),'/bootstrap':vis(G::pred)])).
'/util':behavior(not(G)::pred,!'should be true if G does not hold', ('/impred':simulate(logicQuery(not(example:somePred([1],X)),V),['/impred':task('/nodalion':trans(!'/cloudlog#clause',[1],['/nodalion':getAllCounters(!clauses)]),[],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':list('/bootstrap':number),axiom,_)))],'/impred':true),'/util':assertEqual(V,1,'/bootstrap':number))).
'/util':behavior(not(G)::pred,!'should fail if G succeeds','/impred':simulate('/impred':not(logicQuery(not(example:somePred([1],X)),1)),['/impred':task('/nodalion':trans(!'/cloudlog#clause',[1],['/nodalion':getAllCounters(!clauses)]),['/nodalion':counterValue(!clauses,clause(example:somePred([1],3),true),2)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':list('/bootstrap':number),axiom,_)))],'/impred':true)).
'/util':behavior(not(G)::pred,!'should succeed if the value is 0','/impred':simulate(logicQuery(not(example:somePred([1],X)),_),['/impred':task('/nodalion':trans(!'/cloudlog#clause',[1],['/nodalion':getAllCounters(!clauses)]),['/nodalion':counterValue(!clauses,clause(example:somePred([1],3),true),0)],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':list('/bootstrap':number),axiom,_)))],'/impred':true)).

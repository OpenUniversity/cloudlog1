'/bootstrap':defAtom(ctxElem::'/bootstrap':type).
'/bootstrap':signature(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),[TTerm::'/bootstrap':typedTerm,CtxIn::'/bootstrap':list(ctxElem),CtxOut::'/bootstrap':list(ctxElem)]).
'/util':behavior(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),!'should accept string literals', ('/parsing':lexParseString(term(TTerm,[],_),!'"foo"',cloudlog),'/util':assertEqual(TTerm,!foo::'/bootstrap':string,'/bootstrap':typedTerm))).
'/parsing':prod(term(Str::'/bootstrap':string,Ctx,Ctx),'/parsing':token(cloudlog),'/parsing':terminal(string(Str))).
'/util':behavior(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),!'should accept number literals', ('/parsing':lexParseString(term(TTerm,[],_),!'-2.3E-4',cloudlog),'/util':assertEqual(TTerm,-0.00023::'/bootstrap':number,'/bootstrap':typedTerm))).
'/parsing':prod(term(Num::'/bootstrap':number,Ctx,Ctx),'/parsing':token(cloudlog),'/parsing':terminal(number(Num))).
'/util':behavior(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),!'should accept number literals', ('/parsing':lexParseString(term(TTerm,[],_),!'-2.3E-4',cloudlog),'/util':assertEqual(TTerm,-0.00023::'/bootstrap':number,'/bootstrap':typedTerm))).
'/util':behavior(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),!'should accept atomic compound terms', ('/parsing':lexParseString(term(TTerm,[package(!foo)],Ctx),!bar,cloudlog),builtin:parseTerm(TTerm,Name,[]),'/util':assertEqual(Name,!'foo#bar','/bootstrap':string))).
'/parsing':prod(term(TTerm,Ctx,Ctx),'/parsing':token(cloudlog),'/parsing':follow(qName(Name,Ctx),'/parsing':pred(builtin:parseTerm(TTerm,Name,[])))).
'/util':behavior(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),!'should accept compound terms', ('/parsing':lexParseString(term(TTerm,[],Ctx),!'foo:bar(1, 2, 3)',cloudlog),builtin:parseTerm(TTerm,Name,[1::'/bootstrap':number,2::'/bootstrap':number,3::'/bootstrap':number]),'/util':assertEqual(Name,!'foo#bar','/bootstrap':string))).
'/parsing':defSymbol(! (,),cloudlog).
'/parsing':defSymbol(!'(',cloudlog).
'/parsing':defSymbol(!')',cloudlog).
'/parsing':prod(term(TTerm,CtxIn,CtxOut),'/parsing':token(cloudlog),'/parsing':follow('/parsing':follow('/parsing':follow('/parsing':follow(qName(Name,CtxIn),'/parsing':terminal('/parsing':symbol(!'('))),termListNe(TArgs,CtxIn,CtxOut)),'/parsing':terminal('/parsing':symbol(!')'))),'/parsing':pred(builtin:parseTerm(TTerm,Name,TArgs)))).
'/bootstrap':signature(termListNe(TArgs,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),[TArgs::'/bootstrap':list('/bootstrap':typedTerm),CtxIn::'/bootstrap':list(ctxElem),CtxOut::'/bootstrap':list(ctxElem)]).
'/parsing':prod(termListNe([TTerm|TArgs],CtxIn,CtxOut),'/parsing':token(cloudlog),'/parsing':follow(term(TTerm,CtxIn,CtxMid),termListSuffix(TArgs,CtxMid,CtxOut))).
'/bootstrap':signature(termListSuffix(TArgs,CtxMid,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),[TArgs::'/bootstrap':list('/bootstrap':typedTerm),CtxMid::'/bootstrap':list(ctxElem),CtxOut::'/bootstrap':list(ctxElem)]).
'/parsing':prod(termListSuffix([],Ctx,Ctx),'/parsing':token(cloudlog),'/parsing':empty).
'/parsing':prod(termListSuffix(List,CtxIn,CtxOut),'/parsing':token(cloudlog),'/parsing':follow('/parsing':terminal('/parsing':symbol(! (,))),termListNe(List,CtxIn,CtxOut))).
'/util':behavior(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),!'should accept variables and add their names to the context', ('/parsing':lexParseString(term(TTerm,[],Ctx),!'Foo',cloudlog),'/util':assertEqual(Ctx,[varName(TTerm,!'Foo')],'/bootstrap':list(ctxElem)))).
'/util':behavior(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),!'should bind variables on matching names', ('/parsing':lexParseString(term(TTerm,[varName(Y::'/bootstrap':number,!'Y'),varName(X::'/bootstrap':number,!'X')],Ctx),!'X',cloudlog),'/util':assertEqual(TTerm,X::'/bootstrap':number,'/bootstrap':typedTerm))).
'/bootstrap':signature(varName(TVar,Name)::ctxElem,[TVar::'/bootstrap':typedTerm,Name::'/bootstrap':string]).
annotation:shrink('/parsing':prod(term(TTerm,CtxIn,CtxOut),'/parsing':token(cloudlog),'/parsing':follow('/parsing':terminal(varName(Name)),'/parsing':pred(builtin:if('/bootstrap':listMember(varName(TTerm,Name),ctxElem,CtxIn),CtxOut::'/bootstrap':list(ctxElem)=CtxIn::'/bootstrap':list(ctxElem),CtxOut::'/bootstrap':list(ctxElem)=[varName(TTerm,Name)|CtxIn]::'/bootstrap':list(ctxElem)))))).
'/util':behavior(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),!'should stream the context trhoughout a compound term', ('/parsing':lexParseString(term(TTerm,[package(!foo)],Ctx),!'a(X, b(Y, X), Y)',cloudlog),'/util':assertStracturallyEqual(TTerm,foo:a(X,foo:b(Y,X),Y)::_,'/bootstrap':typedTerm))).
'/util':behavior(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),!'should parse a list', ('/parsing':lexParseString(term(List::'/bootstrap':list('/bootstrap':number),CtxIn,CtxOut),!'[1, 2, 3]',cloudlog),'/util':assertEqual(List,[1,2,3],'/bootstrap':list('/bootstrap':number)))).
'/util':behavior(term(TTerm,CtxIn,CtxOut)::'/parsing':pattern('/parsing':token(cloudlog)),!'should parse an empty list', ('/parsing':lexParseString(term(List::'/bootstrap':list('/bootstrap':number),CtxIn,CtxOut),![],cloudlog),'/util':assertEqual(List,[],'/bootstrap':list('/bootstrap':number)))).
'/parsing':defSymbol(!'[',cloudlog).
'/parsing':defSymbol(!']',cloudlog).
'/bootstrap':signature(convertTypedList(TList,T,List)::'/bootstrap':pred,[TList::'/bootstrap':list('/bootstrap':typedTerm),T::'/bootstrap':type,List::'/bootstrap':list(T)]).
convertTypedList([],_,[]):-builtin:true.
convertTypedList([First::T|TRest],T,[First|Rest]):-convertTypedList(TRest,T,Rest).
'/bootstrap':signature(termList(TList,Ctx1,Ctx2)::'/parsing':pattern('/parsing':token(cloudlog)),[TList::'/bootstrap':list('/bootstrap':typedTerm),Ctx1::'/bootstrap':list(ctxElem),Ctx2::'/bootstrap':list(ctxElem)]).
'/parsing':prod(termList([],Ctx,Ctx),'/parsing':token(cloudlog),'/parsing':empty).
'/parsing':prod(termList(TList,Ctx1,Ctx2),'/parsing':token(cloudlog),termListNe(TList,Ctx1,Ctx2)).
'/parsing':prod(term(List::'/bootstrap':list(T),Ctx1,Ctx2),'/parsing':token(cloudlog),'/parsing':follow('/parsing':terminal('/parsing':symbol(!'[')),'/parsing':follow(termList(TList,Ctx1,Ctx2),'/parsing':follow('/parsing':terminal('/parsing':symbol(!']')),'/parsing':pred(convertTypedList(TList,T,List)))))).

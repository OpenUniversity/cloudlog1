'/bootstrap':signature(dbFind(Axiom,Value)::'/impred':impred,[Axiom::axiom,Value::'/bootstrap':number]).
'/util':behavior(dbFind(Axiom,Value)::'/impred':impred,!'should query the database for all counters in the corresponding row and family', ('/impred':simulate(dbFind(example:someFact(1,X),Value),['/impred':task('/nodalion':trans(!'example#someFact',Row,['/nodalion':getAllCounters(Family)]),_,'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,_)))],'/impred':true),'/util':assertEqual(Family,!facts,'/bootstrap':string),'/util':assertEqual(Row,1,'/bootstrap':number))).
'/bootstrap':signature(firstArgumentNotGround(Arg)::'/bootstrap':exception,[Arg::'/bootstrap':typedTerm]).
'/impred':clause(dbFind(Axiom,Value),'/impred':conj('/impred':pred((tableName(Axiom,Table),axiomFamily(Axiom,Family,Key::T))),'/impred':if('/impred':pred(builtin:ground(Key::T)),'/impred':conj('/impred':task('/nodalion':trans(Table,Key,['/nodalion':getAllCounters(Family)]),DBVals,'/bootstrap':list('/nodalion':databaseValue(T,axiom,ValType))),'/impred':pred('/bootstrap':listMember('/nodalion':counterValue(Family,Axiom,Value),'/nodalion':databaseValue(T,axiom,ValType),DBVals))),'/impred':pred(builtin:throw(firstArgumentNotGround(Key::T)))))).
'/util':behavior(dbFind(Axiom,Value)::'/impred':impred,!'should succeed for all matches for Axiom in the database', (builtin:findall(X,'/bootstrap':number,annotation:parentheses('/impred':simulate('/impred':with('/nodalion':trans(!'example#someFact',1,['/nodalion':getAllCounters(!facts)]),annotation:changeMode(['/nodalion':counterValue(!facts,example:someFact(1,3),2),'/nodalion':counterValue(!facts,example:someFact(1,7),4)],'/bootstrap':vert),'/bootstrap':list('/nodalion':databaseValue('/bootstrap':number,axiom,_)),dbFind(example:someFact(1,X),Value)),[],'/impred':true)),Values),'/util':assertEqual(Values,[3,7],'/bootstrap':list('/bootstrap':number)))).

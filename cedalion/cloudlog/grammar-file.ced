'/bootstrap':signature(file(Terms,Ctx)::'/parsing':pattern('/parsing':token(cloudlog)),[Terms::'/bootstrap':list('/bootstrap':typedTerm),Ctx::'/bootstrap':list(ctxElem)]).
'/util':behavior(file(Terms,Ctx)::'/parsing':pattern('/parsing':token(cloudlog)),!'should parse an empty string', ('/parsing':lexParseString(file(List,[]),!'',cloudlog),'/util':assertEqual(List,[],'/bootstrap':list('/bootstrap':typedTerm)))).
'/parsing':prod(file([],_),'/parsing':token(cloudlog),'/parsing':empty).
'/util':behavior(file(Terms,Ctx)::'/parsing':pattern('/parsing':token(cloudlog)),!'should parse a term followed by a period', ('/parsing':lexParseString(file(List,[package(!example)]),!'foo(bar, 3).',cloudlog),'/util':assertStracturallyEqual(List,[example:foo(example:bar,3)::_],'/bootstrap':list('/bootstrap':typedTerm)))).
'/util':behavior(file(Terms,Ctx)::'/parsing':pattern('/parsing':token(cloudlog)),!'should parse multiple terms followed by periods', ('/parsing':lexParseString(file(List,[package(!example)]),!'foo(bar, 3).  bar(foo, 2).',cloudlog),'/util':assertStracturallyEqual(List,[example:foo(example:bar,3)::_,example:bar(example:foo,2)::_],'/bootstrap':list('/bootstrap':typedTerm)))).
'/parsing':defSymbol(!.,cloudlog).
'/parsing':prod(file([TTerm|TTerms],Ctx),'/parsing':token(cloudlog),'/parsing':follow(term(TTerm,Ctx,_),'/parsing':follow('/parsing':terminal('/parsing':symbol(!.)),file(TTerms,Ctx)))).
'/util':behavior(file(Terms,Ctx)::'/parsing':pattern('/parsing':token(cloudlog)),!'should parse imports', ('/parsing':lexParseString(file(List,[package(!example)]),!'import "/bar" as bar. bar:foo.',cloudlog),'/util':assertStracturallyEqual(List,['/bar':foo::_],'/bootstrap':list('/bootstrap':typedTerm)))).
'/parsing':prod(file(List,Ctx),'/parsing':token(cloudlog),'/parsing':follow('/parsing':terminal(identifier(!import)),'/parsing':follow('/parsing':terminal(string(Import)),'/parsing':follow('/parsing':terminal(identifier(! (as))),'/parsing':follow('/parsing':follow('/parsing':terminal(identifier(Alias)),'/parsing':terminal('/parsing':symbol(!.))),file(List,[import(Alias,Import)|Ctx])))))).

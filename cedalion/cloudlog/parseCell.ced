'/bootstrap':defAtom(parsedCell::'/bootstrap':type).
'/bootstrap':signature(parseRowResult(RowResult,Values)::'/bootstrap':pred,[RowResult::'/bootstrap':list('/nodalion':databaseValue),Values::'/bootstrap':list(parsedCell)]).
'/util':behavior(parseRowResult(RowResult,Values)::'/bootstrap':pred,!'should convert an empty list to an empty list',parseRowResult([],[])).
parseRowResult([],[]):-builtin:true.
'/bootstrap':signature(parsedCell(Column,Value)::parsedCell,[Column::'/bootstrap':string,Value::'/bootstrap':list(counterValue)]).
'/bootstrap':projection(parsedCell(Column,Value)::parsedCell,'/bootstrap':horiz(['/bootstrap':vis(Column::'/bootstrap':string),'/bootstrap':label(! (=)),'/bootstrap':vis(Value::'/bootstrap':list(counterValue))])).
'/util':behavior(parseRowResult(RowResult,Values)::'/bootstrap':pred,!'should convert a list of cells into parsed cells', (parseRowResult(annotation:changeMode(['/nodalion':value(!fam,!x,[!'\'/cloudlog#baseVal\'(2)']),'/nodalion':value(!fam,!y,[!'\'/cloudlog#baseVal\'(3)',!'\'/cloudlog#inc\'(2,!foo,[],1001)'])],'/bootstrap':vert),Values),builtin:equals(Values::'/bootstrap':list(parsedCell),annotation:changeMode([parsedCell(!x,[baseVal(2)]),parsedCell(!y,[baseVal(3),inc(2,!foo,[],1001)])],'/bootstrap':vert)::'/bootstrap':list(parsedCell)))).
'/bootstrap':signature(parseRules(Strings,RulesIn,RulesOut)::'/bootstrap':pred,[Strings::'/bootstrap':list('/bootstrap':string),RulesIn::'/bootstrap':list(parsedCell),RulesOut::'/bootstrap':list(parsedCell)]).
parseRules([],Rules,Rules):-builtin:true.
'/bootstrap':signature(injectParsedRules(RulesIn,Rule,RulesOut)::'/bootstrap':pred,[RulesIn::'/bootstrap':list(parsedCell),Rule::parsedCell,RulesOut::'/bootstrap':list(parsedCell)]).
'/util':behavior(injectParsedRules(RulesIn,Rule,RulesOut)::'/bootstrap':pred,!'should unify lists related to the same key', (injectParsedRules([parsedCell(!y,[baseVal(4)]),parsedCell(!x,[inc(3,!foo,[],7)])],parsedCell(!x,[baseVal(2)]),Res),builtin:equals(Res::'/bootstrap':list(parsedCell),annotation:changeMode([parsedCell(!y,[baseVal(4)]),parsedCell(!x,[inc(3,!foo,[],7),baseVal(2)])],'/bootstrap':vert)::'/bootstrap':list(parsedCell)))).
injectParsedRules([],parsedCell(KeyPrime,ValuesPrime),[parsedCell(KeyPrime,ValuesPrime)]):-builtin:true.
injectParsedRules([parsedCell(Key,Values)|RulesIn],parsedCell(KeyPrime,ValuesPrime),RulesOut):-builtin:if(builtin:equals(Key::'/bootstrap':string,KeyPrime::'/bootstrap':string), ('/bootstrap':append(Values,ValuesPrime,ValuesPrimePrime,counterValue),RulesOut::'/bootstrap':list(parsedCell)=[parsedCell(Key,ValuesPrimePrime)|RulesIn]::'/bootstrap':list(parsedCell)), (injectParsedRules(RulesIn,parsedCell(KeyPrime,ValuesPrime),RulesMid),RulesOut::'/bootstrap':list(parsedCell)=[parsedCell(Key,Values)|RulesMid]::'/bootstrap':list(parsedCell))).
parseRules([Str|Strs],RulesIn,RulesOut):-builtin:rawTermToString(Rule::parsedCell,Str),injectParsedRules(RulesIn,Rule,RulesMid),parseRules(Strs,RulesMid,RulesOut).
annotation:shrink((parseRowResult(['/nodalion':value(Fam,Column,Strings)|DBValues],ValuesOut):-parseCell(Strings,Counters),ValuesOut::'/bootstrap':list(parsedCell)=[parsedCell(Column,Counters)|Values]::'/bootstrap':list(parsedCell),parseRowResult(DBValues,Values))).
'/bootstrap':signature(parseCell(Cell,Parsed)::'/bootstrap':pred,[Cell::'/bootstrap':list('/bootstrap':string),Parsed::'/bootstrap':list(counterValue)]).
'/util':behavior(parseCell(Cell,Parsed)::'/bootstrap':pred,!'should convert an empty list to an empty list',parseCell([],[])).
parseCell([],[]):-builtin:true.
'/util':behavior(parseCell(Cell,Parsed)::'/bootstrap':pred,!'should convert term strings into terms',parseCell([!'\'/cloudlog#baseVal\'(4)',!'\'/cloudlog#inc\'(1,!sessionY,[],1000)'],[baseVal(4),inc(1,!sessionY,[],1000)])).
parseCell([Str|Strs],[Term|Terms]):-builtin:rawTermToString(Term::counterValue,Str),parseCell(Strs,Terms).

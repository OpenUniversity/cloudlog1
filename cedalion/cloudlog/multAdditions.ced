'/bootstrap':defAtom(mult::'/Functional':binOp('/bootstrap':list(addition))).
'/bootstrap':projection(mult::'/Functional':binOp('/bootstrap':list(addition)),'/bootstrap':symbol(8855)).
'/bootstrap':alias(mult::'/Functional':binOp('/bootstrap':list(addition)),! (*)).
'/util':behavior(mult::'/Functional':binOp('/bootstrap':list(addition)),!'should return an empty list if the first argument resoves to an empty list', ('/Functional':eval('/Functional':applyBinOp('/Functional':const([]),mult,'/Functional':const([addition(example:someFact(1,2),1)])),'/bootstrap':list(addition),Empty),'/util':assertEqual(Empty,[],'/bootstrap':list(addition)))).
'/util':behavior(mult::'/Functional':binOp('/bootstrap':list(addition)),!'should apply matching axioms on both sides to each other', ('/Functional':eval('/Functional':applyBinOp('/Functional':const([addition(rule(example:someFact(1,X),builtin:true,example:someFact(X,2)),1)]),mult,'/Functional':const([addition(example:someFact(1,3),1)])),'/bootstrap':list(addition),Result),'/util':assertEqual(Result,[addition(example:someFact(3,2),1)],'/bootstrap':list(addition)))).
'/util':behavior(mult::'/Functional':binOp('/bootstrap':list(addition)),!'should multiply the values', ('/Functional':eval('/Functional':applyBinOp('/Functional':const([addition(rule(example:someFact(1,X),builtin:true,example:someFact(X,2)),2)]),mult,'/Functional':const([addition(example:someFact(1,3),3)])),'/bootstrap':list(addition),Result),'/util':assertEqual(Result,[addition(example:someFact(3,2),6)],'/bootstrap':list(addition)))).
'/util':behavior(mult::'/Functional':binOp('/bootstrap':list(addition)),!'should be distributive', ('/Functional':eval('/Functional':applyBinOp('/Functional':const([addition(example:someFact(1,3),3),addition(example:someFact(1,2),2)]),mult,'/Functional':const([addition(rule(example:someFact(1,X),builtin:true,example:someFact(X,2)),2)])),'/bootstrap':list(addition),Result),'/util':assertEqual(Result,[addition(example:someFact(3,2),6),addition(example:someFact(2,2),4)],'/bootstrap':list(addition)))).
'/Functional':def('/Functional':applyBinOp(A,mult,B),'/bootstrap':list(addition),annotation:shrink('/Functional':where('/Functional':const(Result), ('/Functional':eval(A,'/bootstrap':list(addition),APrime),'/Functional':eval(B,'/bootstrap':list(addition),BPrime),builtin:findall(addition(Axiom3,Value3),addition, ('/bootstrap':listMember(addition(Axiom1,Value1),addition,APrime),'/bootstrap':listMember(addition(Axiom2,Value2),addition,BPrime),applyMatch(Axiom1,Axiom2,Axiom3),'/Functional':eval('/Functional':applyBinOp('/Functional':const(Value1),'/Functional':times,'/Functional':const(Value2)),'/bootstrap':number,Value3)),Result))))).

'/bootstrap':signature(counterValue(Table,Row,Column,Session)::'/impred':expr('/bootstrap':number),[Table::'/bootstrap':string,Row::'/bootstrap':string,Column::'/bootstrap':string,Session::'/bootstrap':string]).
'/deploy':behavior(counterValue(Table,Row,Column,Session)::'/impred':expr('/bootstrap':number),!'should evaluate to 0 if Column does not exist in Table/Row','/impred':simulate('/impred':eval(counterValue(!'tbl1',!'row1',!colX,!sessionY),'/bootstrap':number,0),['/impred':task('/nodalion':trans(!'tbl1',!'row1',['/nodalion':get(!colX)]),[],'/bootstrap':list('/nodalion':databaseValue))],'/impred':true)).
'/deploy':behavior(counterValue(Table,Row,Column,Session)::'/impred':expr('/bootstrap':number),!'should return the base value if no other value exists','/impred':simulate('/impred':eval(counterValue(!'tbl1',!'row1',!colX,!sessionY),'/bootstrap':number,4),['/impred':task('/nodalion':trans(!'tbl1',!'row1',['/nodalion':get(!colX)]),['/nodalion':value(!colX,[!'\'/cloudlog#baseVal\'(4)'])],'/bootstrap':list('/nodalion':databaseValue))],'/impred':true)).
'/bootstrap':defAtom(counterValue::'/bootstrap':type).
'/bootstrap':signature(baseVal(X)::counterValue,[X::'/bootstrap':number]).
'/bootstrap':defAtom(vectorClockEntry::'/bootstrap':type).
'/bootstrap':signature(inc(Increment,Session,VC,Timestamp)::counterValue,[Increment::'/bootstrap':number,Session::'/bootstrap':string,VC::'/bootstrap':list(vectorClockEntry),Timestamp::'/bootstrap':number]).
annotation:shrink('/impred':defFunc(counterValue(Table,Row,Column,Session),'/bootstrap':number,annotation:shrink('/impred':where('/impred':funcIf('/impred':pred('/bootstrap':listMember(parsedCell(Column,Ops),parsedCell,Parsed)),counterValue(Ops,Session),'/impred':pureExpr('/Functional':const(0))),'/impred':conj('/impred':task('/nodalion':trans(Table,Row,['/nodalion':get(Column)]),RetVal,'/bootstrap':list('/nodalion':databaseValue)),'/impred':pred(parseRowResult(RetVal,Parsed))))))).
'/deploy':behavior(counterValue(Table,Column,Row,Session)::'/impred':expr('/bootstrap':number),!'should return the sum of the base value and an incrementation if the incrementation was made on Session','/impred':simulate('/impred':eval(counterValue(!'tbl1',!'row1',!colX,!sessionY),'/bootstrap':number,5),['/impred':task('/nodalion':trans(!'tbl1',!'row1',['/nodalion':get(!colX)]),['/nodalion':value(!colX,[!'\'/cloudlog#baseVal\'(4)',!'\'/cloudlog#inc\'(1,!sessionY,[],1000)'])],'/bootstrap':list('/nodalion':databaseValue))],'/impred':true)).
'/bootstrap':signature(counterValue(Ops,Session)::'/impred':expr('/bootstrap':number),[Ops::'/bootstrap':list(counterValue),Session::'/bootstrap':string]).
'/deploy':behavior(counterValue(Ops,Session)::'/impred':expr('/bootstrap':number),!'should return the base value if only it exists','/impred':simulate('/impred':eval(counterValue([baseVal(15)],!foo),'/bootstrap':number,X),[],'/impred':true)).
'/impred':defFunc(counterValue([],_),'/bootstrap':number,'/impred':pureExpr('/Functional':const(0))).
'/impred':defFunc(counterValue([baseVal(X)|Rest],Session),'/bootstrap':number,'/impred':binop('/impred':pureExpr('/Functional':const(X)),'/Functional':numPlus,counterValue(Rest,Session))).
'/deploy':behavior(counterValue(Ops,Session)::'/impred':expr('/bootstrap':number),!'should return the base value if only it exists', ('/impred':simulate('/impred':eval(counterValue([baseVal(15),inc(-7,!foo,[],1111)],!foo),'/bootstrap':number,X),[],'/impred':true),builtin:equals(X::'/bootstrap':number,8::'/bootstrap':number))).
'/impred':defFunc(counterValue([inc(Inc,Session,_,_)|Rest],Session),'/bootstrap':number,'/impred':binop('/impred':pureExpr('/Functional':const(Inc)),'/Functional':numPlus,counterValue(Rest,Session))).
'/bootstrap':sandbox('/impred':simulate('/impred':eval(counterValue([baseVal(15)],!foo),'/bootstrap':number,X),[],'/impred':true)::'/bootstrap':pred).

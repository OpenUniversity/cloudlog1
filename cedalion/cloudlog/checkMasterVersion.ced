'/bootstrap':signature(checkMasterVersion(Axiom,CurrVersion)::'/impred':impred,[Axiom::axiom,CurrVersion::'/bootstrap':number]).
'/util':behavior(checkMasterVersion(Axiom,RowVersion)::'/impred':impred,!'should update the stored version for the table if the row version is greater','/impred':simulate(checkMasterVersion(example:someFact(1,2),9),['/impred':task('/impred':localGet(!'example#someFact:ver'),num(7),'/impred':localStoreVal),'/impred':task('/impred':localSet(!'example#someFact:ver',num(9)),_,'/impred':localStoreVal)],'/impred':true)).
'/util':behavior(checkMasterVersion(Axiom,RowVersion)::'/impred':impred,!'should enqueue updateMaste if the stored version is greater than the row version','/impred':simulate(checkMasterVersion(example:someFact(1,2),7),['/impred':task('/impred':localGet(!'example#someFact:ver'),num(9),'/impred':localStoreVal),'/impred':task('/nodalion':enqueue(!wq,updateMaster(!'example#someFact',1,'/bootstrap':number,9),'/impred':impred),_,'/nodalion':voidType)],'/impred':true)).
'/util':behavior(checkMasterVersion(Axiom,RowVersion)::'/impred':impred,!'should update the stored version with the row version if no version is stored','/impred':simulate(checkMasterVersion(example:someFact(1,2),7),['/impred':task('/impred':localGet(!'example#someFact:ver'),_,'/impred':localStoreVal),'/impred':task('/impred':localSet(!'example#someFact:ver',num(7)),_,'/impred':localStoreVal)],'/impred':true)).
'/util':behavior(checkMasterVersion(Axiom,RowVersion)::'/impred':impred,!'should look up the table version if the given version is 0 and no version is stored', ('/impred':simulate(checkMasterVersion(example:someFact(1,2),0),['/impred':task('/impred':localGet(!'example#someFact:ver'),num(_),'/impred':localStoreVal),'/impred':task('/nodalion':trans(!'%masters',!'example#someFact',['/nodalion':get(!master,version)]),['/nodalion':value(!master,version,[7])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,'/bootstrap':number))),'/impred':task('/impred':localSet(!'example#someFact:ver',num(7)),_,'/impred':localStoreVal),'/impred':task('/nodalion':enqueue(!wq,updateMaster(!'example#someFact',Row,'/bootstrap':number,7),'/impred':impred),_,'/nodalion':voidType)],'/impred':true),'/util':assertEqual(Row,1,'/bootstrap':number))).
annotation:shrink('/impred':clause(checkMasterVersion(Axiom,RowVersion),'/impred':conj('/impred':pred(tableName(Axiom,Table)),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(Table),'/Functional':concat,'/Functional':const(!':ver')),'/bootstrap':string,Key)),'/impred':conj('/impred':task('/impred':localGet(Key),num(StoredVersion),'/impred':localStoreVal),'/impred':if('/impred':pred((\+builtin:var(StoredVersion::'/bootstrap':number),StoredVersion>RowVersion)),'/impred':conj('/impred':pred(axiomFamily(Axiom,_,Row::T)),'/nodalion':enqueueJob(updateMaster(Table,Row,T,StoredVersion))),'/impred':if('/impred':pred(RowVersion::'/bootstrap':number=0::'/bootstrap':number),'/impred':conj('/impred':task('/nodalion':trans(!'%masters',Table,['/nodalion':get(!master,version)]),VersionResult,'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,'/bootstrap':number))),'/impred':conj('/impred':pred(getVersion(VersionResult,TableVersion)),'/impred':conj('/impred':task('/impred':localSet(Key,num(TableVersion)),_,'/impred':localStoreVal),'/impred':conj('/impred':pred(axiomFamily(Axiom,_,Row::T)),'/nodalion':enqueueJob(updateMaster(Table,Row,T,TableVersion)))))),'/impred':task('/impred':localSet(Key,num(RowVersion)),_,'/impred':localStoreVal)))))))).

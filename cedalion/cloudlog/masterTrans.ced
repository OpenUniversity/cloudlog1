'/bootstrap':signature(masterTrans(Trans)::'/impred':impred,[Trans::'/bootstrap':list(addition)]).
'/bootstrap':projection(masterTrans(Trans)::'/impred':impred,'/bootstrap':horiz(['/bootstrap':label(!'master trans'),cpi:vis(Trans::'/bootstrap':list(addition),'/bootstrap':vert)])).
'/util':behavior(masterTrans(Trans)::'/impred':impred,!'should update the table version to the current time ','/impred':simulate('/impred':with('/impred':now,777,'/bootstrap':number,masterTrans([addition(rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)])),['/impred':task('/nodalion':trans(!'%masters',!'example#someFact',['/nodalion':set(!master,version,[777]),'/nodalion':get(!master,version)]),[],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,'/bootstrap':number)))],_)).
'/util':behavior(masterTrans(Trans)::'/impred':impred,!'should fetch the rules of the existing version and store the new version','/impred':simulate('/impred':with('/impred':now,777,'/bootstrap':number,masterTrans([addition(rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)])),['/impred':task('/nodalion':trans(!'%masters',!'example#someFact',['/nodalion':set(!master,version,[777]),'/nodalion':get(!master,version)]),['/nodalion':value(!master,version,[444])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,'/bootstrap':number))),'/impred':task('/impred':localGet(!'example#someFact:444:rules'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(X,1),builtin:true,example:someFact(1,X)),2)]),'/impred':localStoreVal),'/impred':task('/nodalion':trans(!'%masters',!'example#someFact:777',['/nodalion':addToCounter(!rules,rule(example:someFact(X,1),builtin:true,example:someFact(1,X)),2),'/nodalion':addToCounter(!rules,rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)]),_,'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,'/bootstrap':number)))],_)).
'/util':behavior(masterTrans(Trans)::'/impred':impred,!'should scan the table enqueuing updateMaster jobs ','/impred':simulate('/impred':with('/nodalion':trans(!'%masters',!'example#someFact:777',_),_,'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,'/bootstrap':number)),'/impred':with('/impred':localGet(!'example#someFact:444:rules'),masterRules(['/nodalion':counterValue(!rules,rule(example:someFact(X,1),builtin:true,example:someFact(1,X)),2)]),'/impred':localStoreVal,'/impred':with('/nodalion':trans(!'%masters',!'example#someFact',_),['/nodalion':value(!master,version,[444])],'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,'/bootstrap':number)),'/impred':with('/impred':now,777,'/bootstrap':number,masterTrans([addition(rule(example:someFact(X,Y),builtin:true,example:someFact(Y,X)),1)]))))),['/impred':task('/nodalion':scan(!'example#someFact',Row,T,'/nodalion':enqueueJob(updateMaster(!'example#someFact',Row,T,777))),_,'/nodalion':voidType)],_)).
annotation:shrink('/impred':clause(masterTrans(Trans),'/impred':conj('/impred':task('/impred':now,Now,'/bootstrap':number),'/impred':conj('/impred':pred('/bootstrap':listMember(addition(Axiom,_),addition,Trans)),'/impred':conj('/impred':pred(tableName(Axiom,Table)),'/impred':conj('/impred':task('/nodalion':trans(!'%masters',Table,['/nodalion':set(!master,version,[Now]),'/nodalion':get(!master,version)]),CurrVer,'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,'/bootstrap':number))),'/impred':conj('/impred':pred(getVersion(CurrVer,CurrVerNum)),'/impred':conj(getMasterAxioms(Table,!rules,CurrVerNum,CurrRules),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp(dbResults(CurrRules),plus,'/Functional':const(Trans)),'/bootstrap':list(addition),Rules)),'/impred':conj('/impred':pred(rulesToOps(Rules,Ops)),'/impred':conj('/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(Table),'/Functional':concat,'/Functional':applyBinOp('/Functional':const(! (:)),'/Functional':concat,'/Functional':'num2str'('/Functional':const(Now)))),'/bootstrap':string,Key)),'/impred':conj('/impred':task('/nodalion':trans(!'%masters',Key,Ops),_,'/bootstrap':list('/nodalion':databaseValue('/bootstrap':string,axiom,'/bootstrap':number))),'/impred':task('/nodalion':scan(Table,Row,T,'/nodalion':enqueueJob(updateMaster(Table,Row,T,Now))),_,'/nodalion':voidType))))))))))))).
'/bootstrap':signature(rulesToOps(Rules,Ops)::'/bootstrap':pred,[Rules::'/bootstrap':list(addition),Ops::'/bootstrap':list('/nodalion':databaseOp(axiom,'/bootstrap':number))]).
rulesToOps([],[]):-builtin:true.
rulesToOps([addition(Rule,Value)|Rules],['/nodalion':addToCounter(!rules,Rule,Value)|Ops]):-rulesToOps(Rules,Ops).

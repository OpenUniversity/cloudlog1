'/bootstrap':signature(qName(Name,Ctx)::'/parsing':pattern('/parsing':token(cloudlog)),[Name::'/bootstrap':string,Ctx::'/bootstrap':list(ctxElem)]).
'/bootstrap':signature(package(Name)::ctxElem,[Name::'/bootstrap':string]).
'/util':behavior(qName(Name,Ctx)::'/parsing':pattern('/parsing':token(cloudlog)),!'should accept simple names under the package namespace', ('/parsing':lexParseString(qName(Name,[package(!foo)]),!bar,cloudlog),'/util':assertEqual(Name,!'foo#bar','/bootstrap':string))).
'/parsing':prod(qName(QName,Ctx),'/parsing':token(cloudlog),'/parsing':follow('/parsing':terminal(identifier(Name)),'/parsing':pred(('/bootstrap':listMember(package(Package),ctxElem,Ctx),'/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(Package),'/Functional':concat,'/Functional':const(!'#')),'/Functional':concat,'/Functional':const(Name)),'/bootstrap':string,QName))))).
'/util':behavior(qName(Name,Ctx)::'/parsing':pattern('/parsing':token(cloudlog)),!'should accept qualified names and use the qualifier as prefix if no import exists', ('/parsing':lexParseString(qName(Name,[]),!'foo:bar',cloudlog),'/util':assertEqual(Name,!'foo#bar','/bootstrap':string))).
'/bootstrap':signature(import(Qual,Prefix)::ctxElem,[Qual::'/bootstrap':string,Prefix::'/bootstrap':string]).
'/util':behavior(qName(Name,Ctx)::'/parsing':pattern('/parsing':token(cloudlog)),!'should accept qualified names and use the import as the prefix, if exists', ('/parsing':lexParseString(qName(Name,[import(!foo,!'/FOO')]),!'foo:bar',cloudlog),'/util':assertEqual(Name,!'/FOO#bar','/bootstrap':string))).
'/parsing':defSymbol(! (:),cloudlog).
annotation:shrink('/parsing':prod(qName(QName,Ctx),'/parsing':token(cloudlog),'/parsing':follow('/parsing':follow('/parsing':terminal(identifier(Qual)),'/parsing':follow('/parsing':terminal('/parsing':symbol(! (:))),'/parsing':terminal(identifier(Name)))),'/parsing':pred(builtin:if('/bootstrap':listMember(import(Qual,Prefix),ctxElem,Ctx),'/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(Prefix),'/Functional':concat,'/Functional':const(!'#')),'/Functional':concat,'/Functional':const(Name)),'/bootstrap':string,QName),'/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(Qual),'/Functional':concat,'/Functional':const(!'#')),'/Functional':concat,'/Functional':const(Name)),'/bootstrap':string,QName)))))).

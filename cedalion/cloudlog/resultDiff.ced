'/bootstrap':signature(resultDiff(Prev,Curr,Diff,T1,T2)::'/bootstrap':pred,[Prev::'/bootstrap':list('/nodalion':databaseValue(T1,axiom,T2)),Curr::'/bootstrap':list('/nodalion':databaseValue(T1,axiom,T2)),Diff::'/bootstrap':list('/nodalion':databaseValue(T1,axiom,T2)),T1::'/bootstrap':type,T2::'/bootstrap':type]).
'/util':behavior(resultDiff(Prev,Curr,Diff,T1,T2)::'/bootstrap':pred,!'should provide Diff=Curr if Prev is empty', (resultDiff([],['/nodalion':counterValue(!facts,example:someFact(1,2),1),'/nodalion':counterValue(!facts,example:someFact(2,3),1)],Diff,T1,T2),'/util':assertEqual(Diff,['/nodalion':counterValue(!facts,example:someFact(1,2),1),'/nodalion':counterValue(!facts,example:someFact(2,3),1)],'/bootstrap':list('/nodalion':databaseValue(T1,axiom,T2))))).
resultDiff([],Curr,Curr,_,_):-builtin:true.
'/util':behavior(resultDiff(Prev,Curr,Diff,T1,T2)::'/bootstrap':pred,!'should provide the inverse of Diff if the axioms of Diff are not in Curr', (resultDiff(['/nodalion':counterValue(!facts,example:someFact(4,5),3),'/nodalion':counterValue(!facts,example:someFact(1,2),1)],['/nodalion':counterValue(!facts,example:someFact(2,3),1)],Diff,T1,T2),'/util':assertEqual(Diff,annotation:changeMode(['/nodalion':counterValue(!facts,example:someFact(4,5),-3),'/nodalion':counterValue(!facts,example:someFact(1,2),-1),'/nodalion':counterValue(!facts,example:someFact(2,3),1)],'/bootstrap':vert),'/bootstrap':list('/nodalion':databaseValue(T1,axiom,T2))))).
annotation:shrink((resultDiff(['/nodalion':counterValue(Family,Axiom,Value)|Prev],Curr,['/nodalion':counterValue(Family,Axiom,ValuePrime)|Diff],T1,T2):-'/Functional':eval('/Functional':applyBinOp('/Functional':const(0),'/Functional':minus,'/Functional':const(Value)),'/bootstrap':number,ValuePrime),builtin:if('/bootstrap':listMember('/nodalion':counterValue(Family,Axiom,CurrValue),'/nodalion':databaseValue(T1,axiom,T2),Curr),builtin:true,resultDiff(Prev,Curr,Diff,T1,T2)))).
'/bootstrap':disabled('/util':behavior(resultDiff(Prev,Curr,Diff,T1,T2)::'/bootstrap':pred,!'should unify Prev and Curr entries on the same axiom', (resultDiff(['/nodalion':counterValue(!facts,example:someFact(1,2),1)],['/nodalion':counterValue(!facts,example:someFact(1,2),2)],Diff,T1,T2),'/util':assertEqual(Diff,['/nodalion':counterValue(!facts,example:someFact(1,2),1)],'/bootstrap':list('/nodalion':databaseValue(T1,axiom,T2)))))).
